{
    "plot_hnn_animation.ipynb": {
        "9.4: Animating HNN simulations": {
            "level": 1,
            "html": "<div class='markdown-cell'>\n    <h1>9.4: Animating HNN simulations</h1>\n<p>This example demonstrates how to animate HNN simulations</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Author: Nick Tolley <nicholas_tolley@brown.edu>\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>First, we'll import the necessary modules for instantiating a network\nand running a simulation that we would like to animate.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        import os.path as op\n\nimport hnn_core\nfrom hnn_core import jones_2009_model, simulate_dipole, read_params\nfrom hnn_core.network_models import add_erp_drives_to_jones_model\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>We begin by instantiating the network. For this example, we will\nreduce the number of cells in the network to speed up the\nsimulations.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net = jones_2009_model(mesh_shape=(3, 3))\n\n# Note that we move the cells further apart to allow better visualization of\n# the network (default inplane_distance=1.0 \u00b5m).\nnet.set_cell_positions(inplane_distance=300)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>The :class:<code>hnn_core.viz.NetworkPlotter</code> class can be used\nto visualize the 3D structure of the network.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        from hnn_core.viz import NetworkPlotter\n\nnet_plot = NetworkPlotter(net)\nnet_plot.fig\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>We can also visualize the network from another angle by adjusting the\nazimuth and elevation parameters.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net_plot.azim = 45\nnet_plot.elev = 40\nnet_plot.fig\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Next we add event related potential (ERP) producing drives to the\nnetwork and run the simulation (see\n<code>evoked example &amp;lt;sphx_glr_auto_examples_plot_simulate_evoked.py&amp;gt;</code>\nfor more details). To visualize the membrane potential of cells in the\nnetwork, we need use\n<code>simulate_dipole(..., record_vsec=&amp;#x27;all&amp;#x27;)</code>\nwhich turns on the recording of voltages in all sections of all cells in\nthe network.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        add_erp_drives_to_jones_model(net)\ndpl = simulate_dipole(net, tstop=170, record_vsec='all')\nnet_plot = NetworkPlotter(net)  # Reinitialize plotter with simulated network\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Finally, we can animate the simulation using the\n<code>export_movie()</code> method. We can adjust the xyz limits of the\nplot to better visualize the network.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # # If you want to save the animation to a file, then uncomment the code in this cell.\n# net_plot.xlim = (400, 1600)\n# net_plot.ylim = (400, 1600)\n# net_plot.zlim = (-500, 1600)\n# net_plot.azim = 225\n# net_plot.export_movie('animation_demo.gif', dpi=100, fps=30, interval=100)\n    </code>\n</div>"
        }
    }
}