{
    "plot_record_extracellular_potentials.ipynb": {
        "9.2: Record extracellular potentials": {
            "level": 1,
            "html": "<div class='markdown-cell'>\n    <h1>9.2: Record extracellular potentials</h1>\n<p>The main output of HNN simulations is the 'dipole' waveform, i.e.,\nthe net intracellular current flowing in pyramidal cell apical\ndendrites. At the large distances between cells and M/EEG sensors, this\n'primary' current is the main contributor to the measured fields. Close\nto the cells, the local field potential (LFP) is the result of\nintracellular current leaking into the extracellular medium through\nactive and passive membrane channels. Under some simplifying\nassumptions, we may approximate the LFP at virtual electrodes placed in\nand around the HNN network model.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Authors: Christopher Bailey <cjb@cfin.au.dk>\n#          Mainak Jas <mainakjas@gmail.com>\n#          Nick Tolley <nicholas_tolley@brown.edu>\n\n# sphinx_gallery_thumbnail_number = 3\n\nimport matplotlib.pyplot as plt\n\nfrom hnn_core import jones_2009_model, simulate_dipole\nfrom hnn_core.network_models import add_erp_drives_to_jones_model\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>The default network model defined in Jones et al.\u00a0(2009) [1]_\nconsists of a square grid of pyramidal cells. The in-plane distance\nbetween pyramidal cell somas on the grid can be set by the user, which\nwill have an influence on the extracellular potentials (but not on the\ncalculated net intracellular dipole moment). In this example, we'll\nsimulate a network of model cells spaced 30 um apart. To drive the\nnetwork dynamics, we'll use three evoked 'ERP' drives; see the\nevent-related potential (ERP) example for details.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net = jones_2009_model()\nadd_erp_drives_to_jones_model(net)\n\nnet.set_cell_positions(inplane_distance=30.)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Extracellular recordings require specifying the electrode positions.\nIt can be useful to visualize the cells of the network to decide on the\nplacement of each electrode.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net.plot_cells()\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>The default network consists of 2 layers (L2 and L5), within which\nthe cell somas are arranged in a regular grid, and apical dendrites are\naligned along the z-axis. We can simulate a linear multielectrode array\nwith 100 um intercontact spacing [2]_ by specifying a list of (x, y, z)\ncoordinate triplets. The L5 pyramidal cell somas are at z=0 um, with\napical dendrites extending up to z~2000 um. L2 pyramidal cell somas\nreside at z~1300 um, and have apical dendrites extending to z~2300 um.\nWe'll place the recording array in the center of the network. By\ndefault, a value of 0.3 S/m is used for the constant extracellular\nconductivity and the 'point source approximation' for calculations; see\n:meth:<code>hnn_core.Network.add_electrode_array</code> for details.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        depths = list(range(-325, 2150, 100))\nelectrode_pos = [(135, 135, dep) for dep in depths]\nnet.add_electrode_array('shank1', electrode_pos)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>The electrode arrays are stored under <code>Network.rec_arrays</code>\nas a dictionary of\n:class:<code>hnn_core.extracellular.ElectrodeArray</code> objects that\nare now attached to the network and will be recorded during the\nsimulation. Note that calculating the extracellular potentials requires\nadditional computational resources and will thus slightly slow down the\nsimulation.\n<code>Using MPI &amp;lt;sphx_glr_auto_examples_plot_simulate_mpi_backend.py&amp;gt;</code>\nwill speed up computation considerably.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        print(net.rec_arrays)\nnet.plot_cells()\n\ndpl = simulate_dipole(net, tstop=170)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>For plotting both aggregate dipole moment and LFP traces, we'll use a\n10 ms smoothing window, after which both data can be decimated by a\nfactor of 20 from 40 to 2 kHz sampling rates (note that decimation is\napplied in two steps). Decimation speeds up plotting significantly.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        trial_idx = 0\nwindow_len = 10  # ms\ndecimate = [5, 4]  # from 40k to 8k to 2k\nfig, axs = plt.subplots(4, 1, sharex=True, figsize=(6, 8),\n                        gridspec_kw={'height_ratios': [1, 3, 3, 3]})\n\n# Then plot the aggregate dipole time series on its own axis\ndpl[trial_idx].smooth(window_len=window_len)\ndpl[trial_idx].plot(ax=axs[0], decim=decimate, show=False)\n\n# use the same smoothing window on the LFP traces to allow comparison to dipole\nnet.rec_arrays['shank1'][trial_idx].smooth(window_len=window_len).plot_lfp(\n    ax=axs[1], decim=decimate, show=False)\n\naxs[1].grid(True, which='major', axis='x')\naxs[1].set_xlabel('')\n# Add spike raster to subplot\nnet.cell_response.plot_spikes_raster(ax=axs[2], show=False)\n\n# Finally, add the CSD to the bottom subplot\nnet.rec_arrays['shank1'][trial_idx].smooth(window_len=window_len).plot_csd(ax=axs[3], show=False)\nplt.tight_layout()\nplt.show()\n    </code>\n</div>"
        },
        "References": {
            "level": 2,
            "html": "<div class='markdown-cell'>\n    <h2>References</h2>\n<p>.. [1] Jones, S. R. et al.\u00a0Quantitative analysis and biophysically\nrealistic neural modeling of the MEG mu rhythm: rhythmogenesis and\nmodulation of sensory-evoked responses. J. Neurophysiol. 102, 3554\u20133572\n(2009). .. [2] Kajikawa, Y. &amp; Schroeder, C. E. How local is the\nlocal field potential? Neuron 72, 847\u2013858 (2011).</p>\n\n</div>"
        }
    }
}