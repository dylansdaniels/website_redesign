{
    "full_executed": true,
    "plot_simulate_gamma.ipynb": {
        "6.2 API Tutorial of Gamma Rhythms": {
            "level": 1,
            "html": "<div class='markdown-cell'>\n    <h1>6.2 API Tutorial of Gamma Rhythms</h1>\n<p>This example demonstrates how to simulate gamma rhythms via the well\nestablished pyramidal-interneuron-gamma mechanisms [1], as detailed in\nthe <a href=\"\">HNN GUI gamma tutorial</a>, using HNN-Core.</p>\n<p>We recommend you first review the GUI tutorial. The workflow below\nrecreates weak gamma rhythms similar to Figures 4 and 5 of the GUI\ntutorial, and strong gamma rhythms similar to Figure 12 and 13 in the\nGUI tutorial.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Authors: Mainak Jas <mjas@mgh.harvard.edu>\n#          Sam Neymotin <samnemo@gmail.com>\n#          Christopher Bailey <bailey.cj@gmail.com>\n\n# sphinx_gallery_thumbnail_number = 2\n\nimport os.path as op\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Let us import hnn_core</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        import hnn_core\nimport matplotlib.pyplot as plt\nfrom hnn_core import simulate_dipole, read_params, jones_2009_model\n\nhnn_core_root = op.dirname(hnn_core.__file__)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Read the parameter file and print the between-cell connectivity\nparameters. Note that these are different compared with the 'default'\nparameter set used in, e.g.,\n<code>sphx_glr_auto_examples_workflows_plot_simulate_alpha.py</code>.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        params_fname = op.join(\n    hnn_core_root,\n    'param',\n    'gamma_L5weak_L2weak.json'\n)\nparams = read_params(params_fname)\nprint(params['gbar_L*'])\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        {\n    &quot;gbar_L2Basket_L2Basket&quot;: 0.01,\n    &quot;gbar_L2Basket_L2Pyr_gabaa&quot;: 0.007,\n    &quot;gbar_L2Basket_L2Pyr_gabab&quot;: 0.0,\n    &quot;gbar_L2Basket_L5Pyr&quot;: 0.0,\n    &quot;gbar_L2Pyr_L2Basket&quot;: 0.0012,\n    &quot;gbar_L2Pyr_L2Pyr_ampa&quot;: 0.0,\n    &quot;gbar_L2Pyr_L2Pyr_nmda&quot;: 0.0,\n    &quot;gbar_L2Pyr_L5Basket&quot;: 0.0,\n    &quot;gbar_L2Pyr_L5Pyr&quot;: 0.0,\n    &quot;gbar_L5Basket_L5Basket&quot;: 0.0075,\n    &quot;gbar_L5Basket_L5Pyr_gabaa&quot;: 0.08,\n    &quot;gbar_L5Basket_L5Pyr_gabab&quot;: 0.0,\n    &quot;gbar_L5Pyr_L5Basket&quot;: 0.00091,\n    &quot;gbar_L5Pyr_L5Pyr_ampa&quot;: 0.0,\n    &quot;gbar_L5Pyr_L5Pyr_nmda&quot;: 0.0\n}\n\n    </div>\n</div>\n<div class='markdown-cell'>\n    <p>We'll next add a tonic Poisson-distributed excitation to pyramidal\ncells</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net = jones_2009_model(params)\n\nweights_ampa = {\n    'L2_pyramidal': 0.0008,\n    'L5_pyramidal': 0.0075,\n}\nsynaptic_delays = {\n    'L2_pyramidal': 0.1,\n    'L5_pyramidal': 1.0,\n}\nrate_constant = {\n    'L2_pyramidal': 140.0,\n    'L5_pyramidal': 40.0,\n}\nnet.add_poisson_drive(\n    'poisson',\n    rate_constant=rate_constant,\n    weights_ampa=weights_ampa,\n    location='proximal',\n    synaptic_delays=synaptic_delays,\n    event_seed=1349\n)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>And then we'll simulate the dipole moment in a single trial. (Note:\nthe default value used by <code>simulate_dipole</code> is\nn_trials=params[\"N_trials\"].)</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        dpls = simulate_dipole(\n    net,\n    tstop=250.,\n)\nscaling_factor = 30000\ndpls = [dpl.scale(scaling_factor) for dpl in dpls]  # scale in place\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        Joblib will run 1 trial(s) in parallel by distributing trials over 1 jobs.\nBuilding the NEURON model\n[Done]\nTrial 1: 0.03 ms...\nTrial 1: 10.0 ms...\nTrial 1: 20.0 ms...\nTrial 1: 30.0 ms...\nTrial 1: 40.0 ms...\nTrial 1: 50.0 ms...\nTrial 1: 60.0 ms...\nTrial 1: 70.0 ms...\nTrial 1: 80.0 ms...\nTrial 1: 90.0 ms...\nTrial 1: 100.0 ms...\nTrial 1: 110.0 ms...\nTrial 1: 120.0 ms...\nTrial 1: 130.0 ms...\nTrial 1: 140.0 ms...\nTrial 1: 150.0 ms...\nTrial 1: 160.0 ms...\nTrial 1: 170.0 ms...\nTrial 1: 180.0 ms...\nTrial 1: 190.0 ms...\nTrial 1: 200.0 ms...\nTrial 1: 210.0 ms...\nTrial 1: 220.0 ms...\nTrial 1: 230.0 ms...\nTrial 1: 240.0 ms...\n\n    </div>\n</div>\n<div class='markdown-cell'>\n    <p>Take a look at how different cell types respond to the exogenous\ndrive. Note the periodic firing pattern of all cell types. While the\nbasket cells fire relatively synchronously, the pyramidal cell\npopulations display a more varied pattern, in which only a fraction of\ncells reach firing threshold.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        _ = net.cell_response.plot_spikes_raster()\n\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 640x480 with 1 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_plot_simulate_gamma/fig_01.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>To confirm that the periodicity observed in the firing patterns\ncorrespond to a population oscillation in the gamma-range, we can plot\nthe time-frequency representation together with the signal. Note that\nthe network requires some time to reach steady state. Hence, we omit the\nfirst 50 ms in our analysis.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        tmin = 50\ntrial_idx = 0  # pick first trial\n\n# plot dipole time course and time-frequency\n# representation in same figure\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(\n    nrows=2,\n    ncols=1,\n    sharex=True,\n    figsize=(6, 6),\n    constrained_layout=True,\n)\n\ndpls[trial_idx].plot(\n    tmin=tmin,\n    ax=axes[0],\n    show=False,\n)\n\n# Create an fixed-step tiling of frequencies \n# from 20 to 100 Hz in steps of 1 Hz\nfreqs = np.arange(20., 100., 1.)\ndpls[trial_idx].plot_tfr_morlet(\n    freqs,\n    n_cycles=7,\n    tmin=tmin,\n    ax=axes[1],\n    show=False,\n)\n\n# adjust the bounds of the x axis in the spectrogram\naxes[1].set_xlim(tmin, 250)\n\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 600x600 with 3 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_plot_simulate_gamma/fig_02.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>Now, let us try to re-run the simulation with a tonic bias applied to\nthe L5 Pyramidal cells. Notice that the oscillation waveform is more\nregular, with less noise due to the fact that the tonic depolarization\ndominates over the influence of the Poisson drive. By default, a tonic\nbias is applied to the entire duration of the simulation.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net.add_tonic_bias(\n    cell_type='L5_pyramidal',\n    amplitude=6.,\n)\ndpls = simulate_dipole(\n    net,\n    tstop=250.,\n    n_trials=1,\n)\ndpls = [dpl.scale(scaling_factor) for dpl in dpls]  # scale in place\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        Joblib will run 1 trial(s) in parallel by distributing trials over 1 jobs.\nBuilding the NEURON model\n[Done]\nTrial 1: 0.03 ms...\nTrial 1: 10.0 ms...\nTrial 1: 20.0 ms...\nTrial 1: 30.0 ms...\nTrial 1: 40.0 ms...\nTrial 1: 50.0 ms...\nTrial 1: 60.0 ms...\nTrial 1: 70.0 ms...\nTrial 1: 80.0 ms...\nTrial 1: 90.0 ms...\nTrial 1: 100.0 ms...\nTrial 1: 110.0 ms...\nTrial 1: 120.0 ms...\nTrial 1: 130.0 ms...\nTrial 1: 140.0 ms...\nTrial 1: 150.0 ms...\nTrial 1: 160.0 ms...\nTrial 1: 170.0 ms...\nTrial 1: 180.0 ms...\nTrial 1: 190.0 ms...\nTrial 1: 200.0 ms...\nTrial 1: 210.0 ms...\nTrial 1: 220.0 ms...\nTrial 1: 230.0 ms...\nTrial 1: 240.0 ms...\n\n    </div>\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        _ = dpls[trial_idx].plot()\n\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 640x480 with 1 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_plot_simulate_gamma/fig_03.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>Notice that the Layer 5 pyramidal neurons now fire nearly\nsynchronously, leading to a synchronous activation of the inhibitory\nbasket neurons, resulting in a low-latency IPSP back onto the pyramidal\ncells. The duration of the IPSP is ~20 ms, after which the combined\neffect of the tonic bias and Poisson drive is to bring the pyramidal\ncells back to firing threshold, creating a ~50 Hz PING rhythm. This type\nof synchronous rhythm is sometimes referred to as \u201cstrong\u201d PING.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        _ = net.cell_response.plot_spikes_raster()\n\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 640x480 with 1 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_plot_simulate_gamma/fig_04.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>Although the simulated dipole signal demonstrates clear periodicity,\nits frequency is lower compared with the \"weak\" PING simulation\nabove.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        from hnn_core.viz import plot_psd\n_ = plot_psd(\n    dpls[trial_idx],\n    fmin=20.,\n    fmax=100.,\n    tmin=tmin,\n)\n\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 640x480 with 1 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_plot_simulate_gamma/fig_05.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>Finally, we demonstrate the mechanistic link between PING and the\nGABAA decay time constant (<code>tau2</code>). Using the same\nnetwork/drive configuration as before, we decrease <code>tau2</code>\nfrom 5 to 2 ms.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net.cell_types['L5_pyramidal'].synapses['gabaa']['tau2'] = 2\n\ndpls = simulate_dipole(\n    net,\n    tstop=250.,\n    n_trials=1,\n)\ndpls = [dpl.scale(scaling_factor) for dpl in dpls]  # scale in place\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        Joblib will run 1 trial(s) in parallel by distributing trials over 1 jobs.\nBuilding the NEURON model\n[Done]\nTrial 1: 0.03 ms...\nTrial 1: 10.0 ms...\nTrial 1: 20.0 ms...\nTrial 1: 30.0 ms...\nTrial 1: 40.0 ms...\nTrial 1: 50.0 ms...\nTrial 1: 60.0 ms...\nTrial 1: 70.0 ms...\nTrial 1: 80.0 ms...\nTrial 1: 90.0 ms...\nTrial 1: 100.0 ms...\nTrial 1: 110.0 ms...\nTrial 1: 120.0 ms...\nTrial 1: 130.0 ms...\nTrial 1: 140.0 ms...\nTrial 1: 150.0 ms...\nTrial 1: 160.0 ms...\nTrial 1: 170.0 ms...\nTrial 1: 180.0 ms...\nTrial 1: 190.0 ms...\nTrial 1: 200.0 ms...\nTrial 1: 210.0 ms...\nTrial 1: 220.0 ms...\nTrial 1: 230.0 ms...\nTrial 1: 240.0 ms...\n\n    </div>\n</div>\n<div class='markdown-cell'>\n    <p>This change will shorten the effective refactory period between L5\npyramidal cell spikes and increase the PING frequency from ~50 to ~65\nHz, as seen in the plots below</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        fig, axes = plt.subplots(\n    nrows=3,\n    ncols=1,\n    sharex=True,\n    figsize=(6, 6),\n    constrained_layout=True,\n)\n\ndpls[trial_idx].plot(\n    ax=axes[0],\n    show=False,\n)\n\nnet.cell_response.plot_spikes_raster(\n    ax=axes[1],\n    show=False,\n)\n\ndpls[trial_idx].plot_tfr_morlet(\n    freqs,\n    n_cycles=7,\n    tmin=tmin,\n    ax=axes[2],\n    show=False,\n)\n\n# adjust the bounds of the x axis in the spectrogram\naxes[2].set_xlim(tmin, 250)\n\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 600x600 with 4 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_plot_simulate_gamma/fig_06.png'/>\n</div>"
        },
        "References": {
            "level": 2,
            "html": "<div class='markdown-cell'>\n    <h2>References</h2>\n<p>[1] Lee, S. &amp; Jones, S. R. Distinguishing mechanisms of gamma\nfrequency oscillations in human current source signals using a\ncomputational model of a laminar neocortical network. Frontiers in human\nneuroscience (2013)</p>\n\n</div>"
        }
    }
}