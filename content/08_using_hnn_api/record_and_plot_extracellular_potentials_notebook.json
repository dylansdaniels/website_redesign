{
    "full_executed": true,
    "record_and_plot_extracellular_potentials_notebook.ipynb": {
        "7.2: Record and plot extracellular potentials": {
            "level": 1,
            "html": "<div class='markdown-cell'>\n    <h1>7.2: Record and plot extracellular potentials</h1>\n<p>The main output of HNN simulations is the 'dipole' waveform, i.e.,\nthe net intracellular current flowing in pyramidal cell apical\ndendrites. At the large distances between cells and M/EEG sensors, this\n'primary' current is the main contributor to the measured fields. Close\nto the cells, the local field potential (LFP) is the result of\nintracellular current leaking into the extracellular medium through\nactive and passive membrane channels. Under some simplifying\nassumptions, we may approximate the LFP at virtual electrodes placed in\nand around the HNN network model.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Authors: Christopher Bailey <cjb@cfin.au.dk>\n#          Mainak Jas <mainakjas@gmail.com>\n#          Nick Tolley <nicholas_tolley@brown.edu>\n\nimport matplotlib.pyplot as plt\n\nfrom hnn_core import jones_2009_model, simulate_dipole\nfrom hnn_core.network_models import add_erp_drives_to_jones_model\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>The default network model defined in (Jones et al.\u00a02009) consists of\na square grid of pyramidal cells. The in-plane distance between\npyramidal cell somas on the grid can be set by the user, which will have\nan influence on the extracellular potentials (but not on the calculated\nnet intracellular dipole moment). In this example, we'll simulate a\nnetwork of model cells spaced 30 um apart. To drive the network\ndynamics, we'll use three evoked 'ERP' drives; see the event-related\npotential (ERP) example for details.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net = jones_2009_model()\nadd_erp_drives_to_jones_model(net)\n\nnet.set_cell_positions(inplane_distance=30.)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Extracellular recordings require specifying the electrode positions.\nIt can be useful to visualize the cells of the network to decide on the\nplacement of each electrode.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net.plot_cells(show=False)\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 640x480 with 1 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_record_and_plot_extracellular_potentials_notebook/fig_01.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>The default network consists of 2 layers (L2 and L5), within which\nthe cell somas are arranged in a regular grid, and apical dendrites are\naligned along the z-axis. We can simulate a linear multielectrode array\nwith 100 um intercontact spacing (Kajikawa and Schroeder 2011) by\nspecifying a list of (x, y, z) coordinate triplets. The L5 pyramidal\ncell somas are at z=0 um, with apical dendrites extending up to z~2000\num. L2 pyramidal cell somas reside at z~1300 um, and have apical\ndendrites extending to z~2300 um. We'll place the recording array in the\ncenter of the network. By default, a value of 0.3 S/m is used for the\nconstant extracellular conductivity and the 'point source approximation'\nfor calculations; see <a\nhref=\"https://jonescompneurolab.github.io/hnn-core/stable/generated/hnn_core.Network.html#hnn_core.Network.add_electrode_array\">hnn_core.Network.add_electrode_array</a>\nfor details.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        depths = list(range(-325, 2150, 100))\nelectrode_pos = [(135, 135, dep) for dep in depths]\nnet.add_electrode_array('shank1', electrode_pos)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>The electrode arrays are stored under <code>Network.rec_arrays</code>\nas a dictionary of <a\nhref=\"https://jonescompneurolab.github.io/hnn-core/stable/generated/hnn_core.extracellular.ExtracellularArray.html#hnn_core.extracellular.ExtracellularArray\">hnn_core.extracellular.ExtracellularArray</a>\nobjects that are now attached to the network and will be recorded during\nthe simulation. Note that calculating the extracellular potentials\nrequires additional computational resources and will thus slightly slow\ndown the simulation. <a\nhref=\"https://jonescompneurolab.github.io/textbook/content/09_feature_demos/use_mpi_backend_for_parallelization.html\">Using\nMPI</a> will speed up computation considerably.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        print(net.rec_arrays)\nnet.plot_cells(show=False)\nplt.show()\n\ndpl = simulate_dipole(net, tstop=170)\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        {&#x27;shank1&#x27;: &lt;ExtracellularArray | 25 electrodes, conductivity=0.3, method=psa (no data recorded yet)&gt;}\n\n        &lt;Figure size 640x480 with 1 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_record_and_plot_extracellular_potentials_notebook/fig_02.png'/>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        Joblib will run 1 trial(s) in parallel by distributing trials over 1 jobs.\nLoading custom mechanism files from /Users/austinsoplata/rep/brn/hnn-core/hnn_core/mod/arm64/.libs/libnrnmech.so\nBuilding the NEURON model\n[Done]\nTrial 1: 0.03 ms...\nTrial 1: 10.0 ms...\nTrial 1: 20.0 ms...\nTrial 1: 30.0 ms...\nTrial 1: 40.0 ms...\nTrial 1: 50.0 ms...\nTrial 1: 60.0 ms...\nTrial 1: 70.0 ms...\nTrial 1: 80.0 ms...\nTrial 1: 90.0 ms...\nTrial 1: 100.0 ms...\nTrial 1: 110.0 ms...\nTrial 1: 120.0 ms...\nTrial 1: 130.0 ms...\nTrial 1: 140.0 ms...\nTrial 1: 150.0 ms...\nTrial 1: 160.0 ms...\n\n    </div>\n</div>\n<div class='markdown-cell'>\n    <p>For plotting both aggregate dipole moment and LFP traces, we'll use a\n10 ms smoothing window, after which both data can be decimated by a\nfactor of 20 from 40 to 2 kHz sampling rates (note that decimation is\napplied in two steps). Decimation speeds up plotting significantly.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        trial_idx = 0\nwindow_len = 10  # ms\ndecimate = [5, 4]  # from 40k to 8k to 2k\n\n# Then plot the aggregate dipole time series on its own axis\ndpl[trial_idx].smooth(window_len=window_len)\n\n# Use the same smoothing window on the LFP traces to allow comparison to dipole\nelectrode_data = net.rec_arrays['shank1'][trial_idx].smooth(window_len=window_len)\n    </code>\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        fig, axs = plt.subplots(4, 1, \n                        sharex=True, \n                        figsize=(6, 8),\n                        gridspec_kw={'height_ratios': [1, 2, 2, 2]})\n\ndpl[trial_idx].plot(ax=axs[0], decim=decimate, show=False)\naxs[0].set_xlabel('')\naxs[0].set_ylabel('Dipole moment\\n(nAm)')\naxs[0].set_title('Aggregate Dipole (L2/3 + L5)')\n\n# Add spike raster to subplot\nnet.cell_response.plot_spikes_raster(ax=axs[1], show=False)\naxs[1].set_xlabel('')\naxs[1].set_title('Raster Plot')\n\n# Add smoothed LFP traces to next subplot\nelectrode_data.plot_lfp(ax=axs[2], decim=decimate, show=False)\naxs[2].grid(True, which='major', axis='x')\naxs[2].set_xlabel('')\naxs[2].set_yticklabels('')\naxs[2].set_title('LFP Traces')\n\n# Finally, add the CSD to the bottom subplot\nelectrode_data.plot_csd(ax=axs[3], show=False)\naxs[3].set_xlabel('Time (ms)')\naxs[3].set_ylabel('Electrode depth (um)')\naxs[3].set_title('CSD Plot')\nplt.tight_layout()\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 600x800 with 4 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_record_and_plot_extracellular_potentials_notebook/fig_03.png'/>\n</div>"
        },
        "References": {
            "level": 2,
            "html": "<div class='markdown-cell'>\n    <h2>References</h2>\n<ul>\n<li><p>Jones, Stephanie R., Dominique L. Pritchett, Michael A. Sikora,\nSteven M. Stufflebeam, Matti H\u00e4m\u00e4l\u00e4inen, and Christopher I. Moore. 2009.\n\u201cQuantitative Analysis and Biophysically Realistic Neural Modeling of\nthe MEG Mu Rhythm: Rhythmogenesis and Modulation of Sensory-Evoked\nResponses.\u201d Journal of Neurophysiology 102 (6): 3554\u201372. <a\nhref=\"https://doi.org/10.1152/jn.00535.2009\">https://doi.org/10.1152/jn.00535.2009</a>.</p></li>\n<li><p>Kajikawa, Yoshinao, and Charles E. Schroeder. 2011. \u201cHow Local Is\nthe Local Field Potential?\u201d Neuron 72 (5): 847\u201358. <a\nhref=\"https://doi.org/10.1016/j.neuron.2011.09.029\">https://doi.org/10.1016/j.neuron.2011.09.029</a>.</p></li>\n</ul>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        \n    </code>\n</div>"
        }
    }
}