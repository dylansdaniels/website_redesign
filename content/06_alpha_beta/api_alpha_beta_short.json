{
    "full_executed": true,
    "api_alpha_beta_short.ipynb": {
        "6.2: Simulate Alpha and Beta Rhythms": {
            "level": 1,
            "html": "<div class='markdown-cell'>\n    <h1>6.2: Simulate Alpha and Beta Rhythms</h1>\n<p>This example demonstrates how to simulate alpha and beta frequency\nactivity in the alpha/beta complex of the SI mu-rhythm [1]_, as detailed\nin the <a\nhref=\"https://jonescompneurolab.github.io/hnn-tutorials/alpha_and_beta/alpha_and_beta\">HNN\nGUI alpha and beta tutorial</a>, using HNN-Core.</p>\n<p>We recommend you first review the GUI tutorial. The workflow below\nrecreates the alpha only rhythm, similar to Figure 5 of the GUI\ntutorial, and the alpha/beta complex similar to Figure 20 in the GUI\ntutorial, albeit without visualization of the corresponding\ntime-frequency spectrograms [1]_.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Authors: Mainak Jas <mjas@mgh.harvard.edu>\n#          Sam Neymotin <samnemo@gmail.com>\n#          Nick Tolley <nicholas_tolley@brown.edu>\n#          Christopher Bailey <bailey.cj@gmail.com>\n\nimport os.path as op\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Let us import hnn_core</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        import hnn_core\nfrom hnn_core import simulate_dipole, jones_2009_model\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Now let's simulate the dipole and plot it. To excite the network, we\nadd a ~10 Hz \"bursty\" drive starting at 50 ms and continuing to the end\nof the simulation. Each burst consists of a pair (2) of spikes, spaced\n10 ms apart. The occurrence of each burst is jittered by a random,\nnormally distributed amount (20 ms standard deviation). We repeat the\nburst train 10 times, each time with unique randomization. The drive is\nonly connected to the :term:<code>proximal</code> (dendritic) AMPA\nsynapses on L2/3 and L5 pyramidal neurons.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net = jones_2009_model()\n\nlocation = 'proximal'\nburst_std = 20\nweights_ampa_p = {'L2_pyramidal': 5.4e-5, 'L5_pyramidal': 5.4e-5}\nsyn_delays_p = {'L2_pyramidal': 0.1, 'L5_pyramidal': 1.}\n\nnet.add_bursty_drive(\n    'alpha_prox', tstart=50., burst_rate=10, burst_std=burst_std, numspikes=2,\n    spike_isi=10, n_drive_cells=10, location=location,\n    weights_ampa=weights_ampa_p, synaptic_delays=syn_delays_p, event_seed=284)\n\n# simulate the dipole, but do not automatically scale or smooth the result\ndpl = simulate_dipole(net, tstop=310., n_trials=1)\n\ntrial_idx = 0  # single trial simulated, choose the first index\n# to emulate a larger patch of cortex, we can apply a simple scaling factor\ndpl[trial_idx].scale(3000)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Prior to plotting, we can choose to smooth the dipole waveform (note\nthat the :meth:<code>~hnn_core.dipole.smooth</code>-method operates\nin-place, <em>i.e.</em>, it alters the data inside the\n<code>Dipole</code> object). Smoothing approximates the effect of signal\nsummation from a larger number and greater volume of neurons than are\nincluded in our biophysical model. We can confirm that what we simulate\nis indeed 10 Hz activity by plotting the power spectral density\n(PSD).</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        import matplotlib.pyplot as plt\nfrom hnn_core.viz import plot_dipole, plot_psd\n\nfig, axes = plt.subplots(2, 1, constrained_layout=True)\ntmin, tmax = 10, 300  # exclude the initial burn-in period from the plots\n\n# We'll make a copy of the dipole before smoothing in order to compare\nwindow_len = 20  # convolve with a 20 ms-long Hamming window\ndpl_smooth = dpl[trial_idx].copy().smooth(window_len)\n\n# Overlay the traces for comparison. The function plot_dipole can plot a list\n# of dipoles at once\ndpl[trial_idx].plot(tmin=tmin, tmax=tmax, color='b', ax=axes[0], show=False)\ndpl_smooth.plot(tmin=tmin, tmax=tmax, color='r', ax=axes[0], show=False)\naxes[0].set_xlim((1, 399))\n\nplot_psd(dpl[trial_idx], fmin=1., fmax=1e3, tmin=tmin, ax=axes[1], show=False)\naxes[1].set_xscale('log')\nplt.tight_layout()\nplt.show()\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>The next step is to add a simultaneous 10 Hz\n:term:<code>distal</code> drive with a lower within-burst spread of\nspike times (<code>burst_std</code>) compared with the proximal one. The\ndifferent arrival times of spikes at opposite ends of the pyramidal\ncells will tend to produce bursts of 15-30 Hz power known as beta\nfrequency events.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        location = 'distal'\nburst_std = 15\nweights_ampa_d = {'L2_pyramidal': 5.4e-5, 'L5_pyramidal': 5.4e-5}\nsyn_delays_d = {'L2_pyramidal': 5., 'L5_pyramidal': 5.}\nnet.add_bursty_drive(\n    'alpha_dist', tstart=50., burst_rate=10, burst_std=burst_std, numspikes=2,\n    spike_isi=10, n_drive_cells=10, location=location,\n    weights_ampa=weights_ampa_d, synaptic_delays=syn_delays_d, event_seed=296)\ndpl = simulate_dipole(net, tstop=310., n_trials=1)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>We can verify that beta frequency activity was produced by inspecting\nthe PSD of the most recent simulation. The dominant power in the signal\nis shifted from alpha (~10 Hz) to beta (15-25 Hz) frequency range. All\nplotting and smoothing parameters are as above, but here no scaling is\napplied, leading to smaller absolute values in the plots.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        fig, axes = plt.subplots(3, 1, constrained_layout=True)\n\nnet.cell_response.plot_spikes_hist(ax=axes[0], show=False)\n\n# We'll again make a copy of the dipole before smoothing\nsmooth_dpl = dpl[trial_idx].copy().smooth(window_len)\n\n# Note that using the ``plot_*``-functions are available as ``Dipole``-methods:\ndpl[trial_idx].plot(tmin=tmin, tmax=tmax, ax=axes[1], color='b', show=False)\nsmooth_dpl.plot(tmin=tmin, tmax=tmax, ax=axes[1], color='r', show=False)\n\ndpl[trial_idx].plot_psd(fmin=0., fmax=40., tmin=tmin, ax=axes[2], show=False)\nplt.tight_layout()\nplt.show()\n    </code>\n</div>"
        },
        "References": {
            "level": 2,
            "html": "<div class='markdown-cell'>\n    <h2>References</h2>\n<p>[1] Jones, S. R. et al.\u00a0Quantitative analysis and biophysically\nrealistic neural modeling of the MEG mu rhythm: rhythmogenesis and\nmodulation of sensory-evoked responses. J. Neurophysiol. 102, 3554\u20133572\n(2009).</p>\n\n</div>"
        }
    }
}