{
    "api_alpha_beta.ipynb": {
        "Welcome to the HNN-Core Alpha and Beta tutorial": {
            "level": 1,
            "html": "<div class='markdown-cell'>"
        },
        "Getting Started": {
            "level": 2,
            "html": "    <h1>Welcome to the HNN-Core Alpha and Beta tutorial</h1>\n<h2>Getting Started</h2>\n<p>This tutorial follows the <a\nhref=\"https://jonescompneurolab.github.io/hnn-tutorials/alpha_and_beta/alpha_and_beta\">HNN-GUI\ntutorial</a> with python commands instead of through a graphical user\ninterface. We'll begin with some background on the experimental data\nused in this tutorial, and then give you a quick introduction to the\nHNN-Core API. Finally, we'll show you how to adjust model parameters to\ntest specific hypotheses using HNN simulations.</p>\n\n</div>"
        },
        "0. Scientific Background": {
            "level": 2,
            "html": "<div class='markdown-cell'>\n    <h2>0. Scientific Background</h2>\n<p>In order to understand the workflow and initial parameter sets\nprovided with this tutorial, we must first briefly describe prior\nstudies that led to the creation of the data you will aim to simulate.\nThis tutorial is based on results from Jones et al.\u00a02009 where, using\nMEG, we recorded spontaneous (pre-stimulus) alpha (7-14 Hz) and beta\n(15-20 Hz) rhythms that arise as part of the mu-complex from the primary\nsomatosensory cortex (S1) <a href=\"#fn1\" class=\"footnote-ref\"\nid=\"fnref1\" role=\"doc-noteref\"><sup>1</sup></a>. (Figure 1. See also"
        },
        "Figure 1": {
            "level": 3,
            "html": "[^2], [^3], [^4].)</p>\n<h3>Figure 1</h3>\n<p><img\nsrc=\"https://raw.githubusercontent.com/jonescompneurolab/jones-website/master/images/textbook/content/06_alpha_beta/images/image03.png\" /></p>\n<p><strong>Figure 1 Left</strong>: Spectrogram of spontaneous activity\nfrom current dipole source in SI averaged across 100 trials, from an\nexample subject, shows nearly continuous prestimulus alpha and beta\noscillations. At time zero, a brief tap was given to the contralateral\nfinger tip and the spontaneous oscillations briefly desynchronized.</p>\n<p><strong>Figure 1 Right</strong>: A closer look at the prestimulus\nwaveform and spectrogram from spontaneous activity during example signal\ntrials, shows that the alpha and beta oscillations occur intermittently\nand primarily non-overlapping.</p>\n<p>Our goal was to use our neocortical model to reproduce features of\nthe waveform and spectrogram observed on single unaveraged trials\n(Figure 2 top panel, right) where the alpha and beta components emerge\nbriefly and intermittently in time. On any individual trial (i.e., 1\nsecond of spontaneous data), the presence of alpha and beta activity is\nnot time locked and representative of so-called \u201cinduced\u201d activity.\nSeemingly continuous bands of activity occur only when averaging the\nspectrograms across trials (Figure 2 top panel, left), and this is due\nto the fact that the spectrograms values are strictly positive and the"
        },
        "Figure 2": {
            "level": 3,
            "html": "alpha and beta events accumulate without cancellation [4].</p>\n<h3>Figure 2</h3>\n<p><img\nsrc=\"https://raw.githubusercontent.com/jonescompneurolab/jones-website/master/images/textbook/content/06_alpha_beta/images/old-image29.png\" />\n<strong>Figure 2</strong>: Key features of the spontaneous non-average\nSI alpha/beta complex include, intermittent transient bouts of\nalpha/beta activity, a waveform that oscillates around 0nAm, PSD with\npeaks in the alpha and beta bands, primarily non-overlapping alpha and\nbeta events, and a symmetric waveform oscillation. The model was able to\nreproduce each of these features.</p>\n<p>We found that a sequence of exogenous subthreshold excitatory\nsynaptic drive could activate the network in a manner that reproduced\nimportant features of the SI rhythms in the model (Figure 2). This drive\nconsisted of two nearly-synchronous 10 Hz rhythmic drives that contacted\nthe network through proximal and distal projection pathways (Figure 3).\nThe drives were simulated as population \u201cbursts\u201d of action potentials\nthat contacted the network every 100ms with the mean delay between the\nproximal and distal burst of 0ms. Specifically, as shown schematically\nin Figure 3, the population bursts consisted of 10, 2-spike bursts\nGaussian distributed in time. We presumed that during such spontaneous\nactivity, these drives may be provided by leminscial and non-lemniscal\nthalamic nuclei, which contact proximal and distal pyramidal neurons\nrespectively, and they are know to burst fire at ~10 Hz frequencies in"
        },
        "Figure 3": {
            "level": 3,
            "html": "spontaneous states [^5], [^6].</p>\n<h3>Figure 3</h3>\n<p><img\nsrc=\"https://raw.githubusercontent.com/jonescompneurolab/jones-website/master/images/textbook/content/06_alpha_beta/images/image04.png\" />\n<strong>Figure 3</strong>: Schematic illustration of exogenous 10 Hz\nburst drive through proximal and distal projection pathways. \u201cPopulation\nbursts\u201d, consisting of a set number of \u201cburst units\u201d (10, 2-spike bursts\nshown) drive post-synaptic conductances in the local network with a set\nfrequency (100 ms ISI) and mean delay between proximal and distal.</p>\n<p>We assumed that the macroscale rhythms generating the observed alpha\nand beta activity arose from subthreshold current flow in a large\npopulation of neurons, as opposed to being generated by local spiking\ninteraction. As such, the effective strengths of the exogenous driving\ninputs were tuned so that the cells in the network remained subthreshold\n(all other parameters were tuned and fixed base on the morphology,\nphysiology and connectivity within layered neocortical circuits, see\nJones et al.\u00a02009 [1] for details). The inputs drove subthreshold\ncurrents up and down the pyramidal neurons to reproduce accurate\nwaveform and spectrogram features (see Figure 3). A scaling factor of\n3000 was multiplied by the model waveform to reproduce nAm units\ncomparable to the recorded data, suggesting on the order 200 x 3000 =\n600,000 pyramidal neurons contributed to this signal.</p>\n<p>We further found that decreasing the delay between the drives to\n~50ms created a pure alpha oscillation, while applying an ~0ms delay\ncaused beta events to emerge and increased the strength of the distal\ndrive, creating stronger beta activity (data not shown; see parameter\nexploration below). This result led to the novel prediction that brief\nbeta events emerge from a broad proximal drive disrupted by a\nsimultaneous strong distal drive that lasted 50ms (i.e., one beta\nperiod). Support for this prediction was found invasively with laminar\nrecordings in mice and monkeys [3].</p>\n<p>In this tutorial, we will explore parameter changes that illustrate\nthese results. We will walk you step-by-step through simulations with\nvarious combinations of rhythmic proximal and distal drives to describe\nhow each contributes to the alpha and beta components of the SI\nalpha/beta complex rhythm. We will begin by simulating only rhythmic\nproximal alpha frequency inputs (Step 1), followed by simulating only\ndistal alpha frequency inputs (Step 2), followed by various combinations\nof proximal and distal drive to generate alpha and beta rhythms. We\u2019ll\nshow you how HNN can plot waveforms, time-frequency spectrograms, and\npower spectral density plots of the simulated data, as well as for"
        },
        "References": {
            "level": 3,
            "html": "imported recorded data.</p>\n<h3>References</h3>\n<ol type=\"1\">\n<li>Jones, S. R. et al.\u00a0Quantitative analysis and biophysically\nrealistic neural modeling of the MEG mu rhythm: rhythmogenesis and\nmodulation of sensory-evoked responses. J. Neurophysiol. 102, 3554\u20133572\n(2009).</li>\n</ol>\n<ol start=\"2\" type=\"1\">\n<li><p>Ziegler, D. A. et al.\u00a0Transformations in oscillatory activity and\nevoked responses in primary somatosensory cortex in middle age: a\ncombined computational neural modeling and MEG study. Neuroimage 52,\n897\u2013912 (2010).</p></li>\n<li><p>Sherman, M. A. et al.\u00a0Neural mechanisms of transient neocortical\nbeta rhythms: Converging evidence from humans, computational modeling,\nmonkeys, and mice. Proc. Natl. Acad. Sci. U. S. A. 113, E4885\u201394\n(2016).</p></li>\n<li><p>Jones, S. R. When brain rhythms aren\u2019t \u2018rhythmic\u2019: implication\nfor their mechanisms and meaning. Curr. Opin. Neurobiol. 40, 72\u201380\n(2016).</p></li>\n<li><p>Jones, E. G. The thalamic matrix and thalamocortical synchrony.\nTrends Neurosci. 24, 595\u2013601 (2001).</p></li>\n<li><p>Hughes, S. W. &amp; Crunelli, V. Thalamic mechanisms of EEG alpha\nrhythms and their pathological implications. Neuroscientist 11, 357\u2013372\n(2005).</p></li>\n</ol>\n<section id=\"footnotes\" class=\"footnotes footnotes-end-of-document\"\nrole=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\"><p>Jones, S. R. et al.\u00a0Quantitative analysis and\nbiophysically realistic neural modeling of the MEG mu rhythm:\nrhythmogenesis and modulation of sensory-evoked responses. J.\nNeurophysiol. 102, 3554\u20133572 (2009).<a href=\"#fnref1\"\nclass=\"footnote-back\" role=\"doc-backlink\">\u21a9\ufe0e</a></p></li>\n</ol>\n</section>\n\n</div>"
        },
        "0. Importing python libraries and loading data": {
            "level": 2,
            "html": "<div class='markdown-cell'>\n    <h2>0. Importing python libraries and loading data</h2>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        import numpy as np\nimport matplotlib.pyplot as plt\n\nimport hnn_core\nfrom hnn_core import jones_2009_model, simulate_dipole, MPIBackend, JoblibBackend, read_dipole\nfrom hnn_core.viz import plot_dipole, plot_tfr_morlet, plot_psd\n    </code>\n</div>"
        },
        "1. Simulating Rhythmic Proximal Inputs: Alpha Only": {
            "level": 2,
            "html": "<div class='markdown-cell'>\n    <h2>1. Simulating Rhythmic Proximal Inputs: Alpha Only</h2>\n<p>As described in the introduction, low-frequency alpha and beta\nrhythms can be simulated by a combination of rhythmic subthreshold\nproximal and distal ~10Hz inputs. Here, we begin by describing the"
        },
        "1.1 Define network and drives": {
            "level": 3,
            "html": "impact of proximal inputs only.</p>\n<h3>1.1 Define network and drives</h3>\n<p>Let's start with instantiating our network. We will give it the\nunique name <code>net_alpha_prox</code> so that we can compare it with\nsimulation results later on.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net_alpha_prox = jones_2009_model()\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>TODO AES nanosiemens? or uS? are drives vs real synapses using\ndifferent units?</p>\n<p>When defining drives, there are several parameters that must be\ndefined. Here we start with connection weights and delays of our\nproximal drive. For the weights, there are AMPA and NMDA receptors on\neach cell type (pyramidal and basket cells). To specify the maximum\nconductance\n<math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mover><mi>g</mi><mo accent=\"true\">\u203e</mo></mover><annotation encoding=\"application/x-tex\">\\bar{g}</annotation></semantics></math>\nin nanosiemens (nS), we will use a dictionary\n<code>weights_ampa_p</code> where the keys specify the cell type. The\ndelay parameters <code>syn_delays_p</code> control the arrival time of\neach spike to the network. In this example, the delay to the layer 2/3\ncells is 0.1 ms, with a slightly longer delay to the layer 5 cells of 1\nms.</p>\n<p>Note that cells not specified in the dictionary will not recieve\ninput from the drive.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        weights_ampa_p = {'L2_pyramidal': 5.4e-5, 'L5_pyramidal': 5.4e-5}\nsyn_delays_p = {'L2_pyramidal': 0.1, 'L5_pyramidal': 1.0}\n\nnet_alpha_prox.add_bursty_drive(\n    'alpha_prox', tstart=50.0, tstart_std=0.0, burst_rate=10, burst_std=20, numspikes=2,\n    spike_isi=10, n_drive_cells=10, location='proximal',\n    weights_ampa=weights_ampa_p, synaptic_delays=syn_delays_p, event_seed=14)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>The rhythmic proximal inputs defined above drive excitatory synapses\nin the neocortical network in a proximal projection pattern, as shown\nbelow AES in Figure 4. For further details on the connectivity structure\nof the network, see the (AES TODO link) Under the Hoodsection of the HNN\nwebsite. Rhythmic proximal input occurs through stochastic, presynaptic\nbursts of action potentials from a population of bursting cells (set\nwith <code>n_drive_cells</code>; see Figure 3) onto postsynaptic neurons\nof the modelled network. Stochasticity is introduced in two places: the\nspike train start time for each bursting cell is sampled from a normal\ndistribution with mean start time mean (ms) <code>tstart</code> and\nstandard deviation (ms) <code>tstart_std</code> and the inter-burst\nintervals for each bursting cell are sampled from a normal distribution\nof mean\n<math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mfrac><mn>1</mn><mrow><mi mathvariant=\"normal\">B</mi><mi mathvariant=\"normal\">u</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">s</mi><mi mathvariant=\"normal\">t</mi><mi mathvariant=\"normal\">F</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">q</mi><mi mathvariant=\"normal\">u</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">y</mi></mrow></mfrac><annotation encoding=\"application/x-tex\">\\frac{1}{\\mathrm{Burst Frequency}}</annotation></semantics></math>\n(with \"Burst Frequency\" corresponding to <code>burst_rate</code>, e.g.,\na 100 ms inter-burst interval corresponds to a \u201cBurst frequency\u201d of 10\nHz) and standard deviation <code>burst_std</code> (see Figure 3). Also\nnote that the number of spikes per burst unit is set with\n<code>num_spikes</code>, an inter-spike interval by\n<code>spike_isi</code>, and the final stop time for the entire\npopulation of rhythmic proximal inputs is set with <code>tstop</code>\n(here the parameter is not included which produces repeating bursts"
        },
        "Figure 4": {
            "level": 3,
            "html": "throughout the simulation).</p>\n<h3>Figure 4</h3>\n<p><img\nsrc=\"https://raw.githubusercontent.com/jonescompneurolab/jones-website/master/images/textbook/content/06_alpha_beta/images/prox-drive.png\" /></p>\n\n</div>\n<div class='markdown-cell'>\n    <p>We can check that the drives have been added by looking at</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net_alpha_prox.external_drives\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        {&#x27;alpha_prox&#x27;: &lt;External drive &#x27;alpha_prox&#x27;\n drive class: bursty\n target location: proximal\n target cell types: [&#x27;L2_pyramidal&#x27;, &#x27;L5_pyramidal&#x27;]\n number of drive cells: 10\n cell-specific: False\n dynamic parameters:\n     tstart: 50.0\n     tstart_std: 0.0\n     tstop: None\n     burst_rate: 10\n     burst_std: 20\n     numspikes: 2\n     spike_isi: 10&gt;}\n    </div>\n</div>"
        },
        "1.2 Run the simulation and visualize net current dipole": {
            "level": 3,
            "html": "<div class='markdown-cell'>\n    <h3>1.2 Run the simulation and visualize net current dipole</h3>\n<p>Now, we simulate the dipole with just one trial for now. Note that we\nhave set <code>tstop</code> to 710 ms giving us a sufficiently long\nsimulation to visualize oscillatory activity.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        dpl_alpha_prox = simulate_dipole(net_alpha_prox, tstop=710.0, n_trials=1)\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        Joblib will run 1 trial(s) in parallel by distributing trials over 1 jobs.\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nBuilding the NEURON model\n\n        [Done]\nTrial 1: 0.03 ms...\n\n        Trial 1: 10.0 ms...\nTrial 1: 20.0 ms...\nTrial 1: 30.0 ms...\nTrial 1: 40.0 ms...\n\n        Trial 1: 50.0 ms...\nTrial 1: 60.0 ms...\nTrial 1: 70.0 ms...\nTrial 1: 80.0 ms...\nTrial 1: 90.0 ms...\nTrial 1: 100.0 ms...\nTrial 1: 110.0 ms...\nTrial 1: 120.0 ms...\n\n        Trial 1: 130.0 ms...\nTrial 1: 140.0 ms...\nTrial 1: 150.0 ms...\nTrial 1: 160.0 ms...\n\n        Trial 1: 170.0 ms...\nTrial 1: 180.0 ms...\nTrial 1: 190.0 ms...\nTrial 1: 200.0 ms...\n\n        Trial 1: 210.0 ms...\nTrial 1: 220.0 ms...\nTrial 1: 230.0 ms...\nTrial 1: 240.0 ms...\n\n        Trial 1: 250.0 ms...\nTrial 1: 260.0 ms...\nTrial 1: 270.0 ms...\nTrial 1: 280.0 ms...\nTrial 1: 290.0 ms...\n\n        Trial 1: 300.0 ms...\nTrial 1: 310.0 ms...\nTrial 1: 320.0 ms...\nTrial 1: 330.0 ms...\nTrial 1: 340.0 ms...\n\n        Trial 1: 350.0 ms...\nTrial 1: 360.0 ms...\nTrial 1: 370.0 ms...\nTrial 1: 380.0 ms...\nTrial 1: 390.0 ms...\n\n        Trial 1: 400.0 ms...\nTrial 1: 410.0 ms...\nTrial 1: 420.0 ms...\nTrial 1: 430.0 ms...\nTrial 1: 440.0 ms...\n\n        Trial 1: 450.0 ms...\nTrial 1: 460.0 ms...\nTrial 1: 470.0 ms...\nTrial 1: 480.0 ms...\nTrial 1: 490.0 ms...\nTrial 1: 500.0 ms...\nTrial 1: 510.0 ms...\n\n        Trial 1: 520.0 ms...\nTrial 1: 530.0 ms...\nTrial 1: 540.0 ms...\n\n        Trial 1: 550.0 ms...\nTrial 1: 560.0 ms...\nTrial 1: 570.0 ms...\nTrial 1: 580.0 ms...\n\n        Trial 1: 590.0 ms...\nTrial 1: 600.0 ms...\nTrial 1: 610.0 ms...\n\n        Trial 1: 620.0 ms...\nTrial 1: 630.0 ms...\nTrial 1: 640.0 ms...\nTrial 1: 650.0 ms...\n\n        Trial 1: 660.0 ms...\nTrial 1: 670.0 ms...\nTrial 1: 680.0 ms...\nTrial 1: 690.0 ms...\nTrial 1: 700.0 ms...\n\n    </div>\n</div>\n<div class='markdown-cell'>\n    <p>The simulation is a bit slow. If we want to speed it up, we can use\nMPI. It's a protocol that splits the simulation across neurons. You\nmight need to follow a few extra installation steps to install MPI\ndependencies if you wish to run <code>MPIBackend</code> on your machine\n(see <a\nhref=\"https://jonescompneurolab.github.io/hnn-core/stable/parallel.html\">here</a>).</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # simulate dipole with a specific parallel backend (1 trial)\n# we'll use MPIBackend for the remainder of this tutorial as it is the fastest\n\nn_procs = 8\n\nwith MPIBackend(n_procs=n_procs):\n    dpl_alpha_prox = simulate_dipole(net_alpha_prox, tstop=710.0, n_trials=1)\n    \n# If you don't have the OpenMPI and mpi4py installed on you machine,\n# you can alternatively use JoblibBackend (uncomment lines below) to \n\n# with JoblibBackend(n_jobs=n_procs):\n#    dpls = simulate_dipole(net_alpha_prox, tstop=710.0, n_trials=1)\n\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        MPI will run 1 trial(s) sequentially by distributing network neurons over 8 processes.\n\n        /usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n\n        numprocs=8\n\n        Loading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.soLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nBuilding the NEURON model\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.soLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\n\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\n\n\n        [Done]\n\n        Trial 1: 0.03 ms...\n\n        Trial 1: 10.0 ms...\n\n        Trial 1: 20.0 ms...\n\n        Trial 1: 30.0 ms...\n\n        Trial 1: 40.0 ms...\n\n        Trial 1: 50.0 ms...\n\n        Trial 1: 60.0 ms...\n\n        Trial 1: 70.0 ms...\n\n        Trial 1: 80.0 ms...\n\n        Trial 1: 90.0 ms...\n\n        Trial 1: 100.0 ms...\n\n        Trial 1: 110.0 ms...\n\n        Trial 1: 120.0 ms...\n\n        Trial 1: 130.0 ms...\n\n        Trial 1: 140.0 ms...\n\n        Trial 1: 150.0 ms...\n\n        Trial 1: 160.0 ms...\n\n        Trial 1: 170.0 ms...\n\n        Trial 1: 180.0 ms...\n\n        Trial 1: 190.0 ms...\n\n        Trial 1: 200.0 ms...\n\n        Trial 1: 210.0 ms...\n\n        Trial 1: 220.0 ms...\n\n        Trial 1: 230.0 ms...\n\n        Trial 1: 240.0 ms...\n\n        Trial 1: 250.0 ms...\n\n        Trial 1: 260.0 ms...\n\n        Trial 1: 270.0 ms...\n\n        Trial 1: 280.0 ms...\n\n        Trial 1: 290.0 ms...\n\n        Trial 1: 300.0 ms...\n\n        Trial 1: 310.0 ms...\n\n        Trial 1: 320.0 ms...\n\n        Trial 1: 330.0 ms...\n\n        Trial 1: 340.0 ms...\n\n        Trial 1: 350.0 ms...\n\n        Trial 1: 360.0 ms...\n\n        Trial 1: 370.0 ms...\n\n        Trial 1: 380.0 ms...\n\n        Trial 1: 390.0 ms...\n\n        Trial 1: 400.0 ms...\n\n        Trial 1: 410.0 ms...\n\n        Trial 1: 420.0 ms...\n\n        Trial 1: 430.0 ms...\n\n        Trial 1: 440.0 ms...\n\n        Trial 1: 450.0 ms...\n\n        Trial 1: 460.0 ms...\n\n        Trial 1: 470.0 ms...\n\n        Trial 1: 480.0 ms...\n\n        Trial 1: 490.0 ms...\n\n        Trial 1: 500.0 ms...\n\n        Trial 1: 510.0 ms...\n\n        Trial 1: 520.0 ms...\n\n        Trial 1: 530.0 ms...\n\n        Trial 1: 540.0 ms...\n\n        Trial 1: 550.0 ms...\n\n        Trial 1: 560.0 ms...\n\n        Trial 1: 570.0 ms...\n\n        Trial 1: 580.0 ms...\n\n        Trial 1: 590.0 ms...\n\n        Trial 1: 600.0 ms...\n\n        Trial 1: 610.0 ms...\n\n        Trial 1: 620.0 ms...\n\n        Trial 1: 630.0 ms...\n\n        Trial 1: 640.0 ms...\n\n        Trial 1: 650.0 ms...\n\n        Trial 1: 660.0 ms...\n\n        Trial 1: 670.0 ms...\n\n        Trial 1: 680.0 ms...\n\n        Trial 1: 690.0 ms...\n\n        Trial 1: 700.0 ms...\n\n    </div>\n</div>\n<div class='markdown-cell'>\n    <p>To help visualize simulation results, HNN-Core comes equipped with\nseveral visualization functions. You can learn more about the in built\nplotting functions by browsing some of the examples <a\nhref=\"https://jonescompneurolab.github.io/hnn-core/stable/auto_examples/index.html\">here</a>.\nFor now, we are going to utilize the <code>plot_spike_hist()</code>,\n<code>plot_dipole()</code>, and <code>plot_tfr_morlet()</code>\nfunctions. Let's package these into a function so that we can reuse to\nvisualize simulation results later on.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        def simulation_plots(net, dpl, xlim=[0, 710]):\n    # Set up 3 panel figure\n    fig, axes = plt.subplots(3, 1, sharex=True, figsize=(7, 7), constrained_layout=True)\n\n    # Plot histogram of proximal and distal drive spike times\n    net.cell_response.plot_spikes_hist(ax=axes[0], show=False)\n    axes[0].set_title('Input Histogram')\n\n    # Plot aggregate current dipole\n    plot_dipole(dpl, ax=axes[1], layer='agg', show=False, tmin=xlim[0], tmax=xlim[1])\n    \n    # Plot spectrogram with frequencies from 6 to 60 Hz in steps of 1 Hz\n    freqs = np.arange(6.0, 30.0, 1.0)\n    plot_tfr_morlet(dpl, freqs, n_cycles=7, ax=axes[2], tmin=xlim[0], tmax=xlim[1])\n    axes[2].set_title('Spectrogram')\n\n    return fig\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>From now on all we have to do is call the function\n<code>simulate_plots()</code> with the <code>Network</code> and\n<code>Dipole</code> objects to make our plots.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # AES TODO why does it show twice? maybe the dpl is a list?\nsimulation_plots(net_alpha_prox, dpl_alpha_prox)\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 700x700 with 4 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_api_alpha_beta/fig_01.png'/>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 700x700 with 4 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_api_alpha_beta/fig_02.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>In this parameter set, a burst of proximal input spikes is provided\nto the network ~10 Hz (i.e., every 100 ms). Due to the stochastic nature\nof the inputs (controlled by the <code>tstart</code>,\n<code>tstart_std</code>, <code>burst_std</code> parameters), there is\nsome variability in the histogram of proximal input times. Note that a\ndecrease in the <code>burst_std</code> would create shorter duration\nbursts (i.e., more synchronous bursts); this will be explored further in\nstep 6.1 below.</p>\n<p>The ~10 Hz bursts of proximal drive induces current flow up the\npyramidal neuron dendrites increasing the signal above the 0 nAm\nbaseline, which then relaxes back to zero, approximately every 100 ms.\nThis is observed in the black current dipole waveform in the figure. The\nbottom panel shows the corresponding time-frequency spectrogram for this\nwaveform that exhibits a high-power continuous 10 Hz signal.\nImportantly, in this example the strength of the proximal input was\ntitrated to be subthreshold (i.e., cells do not spike) under the\nassumption that macroscale oscillations are generated primarily by\nsubthreshold current flow across large populations of synchronous\npyramidal neurons. In step 6.2 below, we explore differences in the\nsignal when the cells are driven to spike (see also TODO AES link\n'erp_tutorial_hnn_core.ipynb').</p>\n<p>While this exploration with proximal drive is only useful in\nunderstanding how subthreshold rhythmic inputs impact the current dipole\nproduced by the circuit, several features of the waveform and\nspectrogram of the signal do not match the recorded data shown in\nFigures 1and 2. Next, we explore the impact of rhythmic distal inputs\nonly (step 2), and then a combination of the two (step 3).</p>\n\n</div>"
        },
        "2. Simulating Rhythmic Distal Inputs: Alpha Only": {
            "level": 2,
            "html": "<div class='markdown-cell'>\n    <h2>2. Simulating Rhythmic Distal Inputs: Alpha Only</h2>\n<p>Having seen that proximal inputs alone push the current flow only in\na single direction (positive), we can confirm that the same occurs if we\nprovide only rhythmic distal inputs, which drive current flow in the\npyramidal neuron dendrites, and hence current dipole signal, in the"
        },
        "2.1 Define network and drives": {
            "level": 3,
            "html": "opposite direction (negative).</p>\n<h3>2.1 Define network and drives</h3>\n<p>We begin again by instantiating the network.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net_alpha_dist = jones_2009_model()\n    </code>\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        weights_ampa_d = {'L2_pyramidal': 5.4e-5, 'L5_pyramidal': 5.4e-5}\nsyn_delays_d = {'L2_pyramidal': 5.0, 'L5_pyramidal': 5.0}\n\nnet_alpha_dist.add_bursty_drive(\n    'alpha_dist', tstart=50.0, tstart_std=0.0, burst_rate=10, burst_std=20, numspikes=2,\n    spike_isi=10, n_drive_cells=10, location='distal',\n    weights_ampa=weights_ampa_d, synaptic_delays=syn_delays_d, event_seed=14) # Need different seed?\n    </code>\n</div>"
        },
        "2.2 Run the simulation and visualize net current dipole": {
            "level": 3,
            "html": "<div class='markdown-cell'>\n    <h3>2.2 Run the simulation and visualize net current dipole</h3>\n<p>Now we simulate the dipole.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        with MPIBackend(n_procs=n_procs):\n    dpl_alpha_dist = simulate_dipole(net_alpha_dist, tstop=710.0, n_trials=1)\n\n# dpl_alpha_dist = simulate_dipole(net_alpha_dist, tstop=710.0, n_trials=1)\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        MPI will run 1 trial(s) sequentially by distributing network neurons over 8 processes.\n\n        /usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n\n        numprocs=8\n\n        Loading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nBuilding the NEURON model\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\n\n        [Done]\n\n        Trial 1: 0.03 ms...\n\n        Trial 1: 10.0 ms...\n\n        Trial 1: 20.0 ms...\n\n        Trial 1: 30.0 ms...\n\n        Trial 1: 40.0 ms...\n\n        Trial 1: 50.0 ms...\n\n        Trial 1: 60.0 ms...\n\n        Trial 1: 70.0 ms...\n\n        Trial 1: 80.0 ms...\n\n        Trial 1: 90.0 ms...\n\n        Trial 1: 100.0 ms...\n\n        Trial 1: 110.0 ms...\n\n        Trial 1: 120.0 ms...\n\n        Trial 1: 130.0 ms...\n\n        Trial 1: 140.0 ms...\n\n        Trial 1: 150.0 ms...\n\n        Trial 1: 160.0 ms...\n\n        Trial 1: 170.0 ms...\n\n        Trial 1: 180.0 ms...\n\n        Trial 1: 190.0 ms...\n\n        Trial 1: 200.0 ms...\n\n        Trial 1: 210.0 ms...\n\n        Trial 1: 220.0 ms...\n\n        Trial 1: 230.0 ms...\n\n        Trial 1: 240.0 ms...\n\n        Trial 1: 250.0 ms...\n\n        Trial 1: 260.0 ms...\n\n        Trial 1: 270.0 ms...\n\n        Trial 1: 280.0 ms...\n\n        Trial 1: 290.0 ms...\n\n        Trial 1: 300.0 ms...\n\n        Trial 1: 310.0 ms...\n\n        Trial 1: 320.0 ms...\n\n        Trial 1: 330.0 ms...\n\n        Trial 1: 340.0 ms...\n\n        Trial 1: 350.0 ms...\n\n        Trial 1: 360.0 ms...\n\n        Trial 1: 370.0 ms...\n\n        Trial 1: 380.0 ms...\n\n        Trial 1: 390.0 ms...\n\n        Trial 1: 400.0 ms...\n\n        Trial 1: 410.0 ms...\n\n        Trial 1: 420.0 ms...\n\n        Trial 1: 430.0 ms...\n\n        Trial 1: 440.0 ms...\n\n        Trial 1: 450.0 ms...\n\n        Trial 1: 460.0 ms...\n\n        Trial 1: 470.0 ms...\n\n        Trial 1: 480.0 ms...\n\n        Trial 1: 490.0 ms...\n\n        Trial 1: 500.0 ms...\n\n        Trial 1: 510.0 ms...\n\n        Trial 1: 520.0 ms...\n\n        Trial 1: 530.0 ms...\n\n        Trial 1: 540.0 ms...\n\n        Trial 1: 550.0 ms...\n\n        Trial 1: 560.0 ms...\n\n        Trial 1: 570.0 ms...\n\n        Trial 1: 580.0 ms...\n\n        Trial 1: 590.0 ms...\n\n        Trial 1: 600.0 ms...\n\n        Trial 1: 610.0 ms...\n\n        Trial 1: 620.0 ms...\n\n        Trial 1: 630.0 ms...\n\n        Trial 1: 640.0 ms...\n\n        Trial 1: 650.0 ms...\n\n        Trial 1: 660.0 ms...\n\n        Trial 1: 670.0 ms...\n\n        Trial 1: 680.0 ms...\n\n        Trial 1: 690.0 ms...\n\n        Trial 1: 700.0 ms...\n\n    </div>\n</div>\n<div class='markdown-cell'>\n    <p>We can use the in built plotting functions of hnn-core to visualize\nthe simulated dipole.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        simulation_plots(net_alpha_dist, dpl_alpha_dist)\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 700x700 with 4 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_api_alpha_beta/fig_03.png'/>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 700x700 with 4 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_api_alpha_beta/fig_04.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>As shown in the histogram in the top panel of figure above, with this\nparameter set, a burst of distal input spikes is provided to the network\n~10 Hz (i.e., every 100 ms). Due to the stochastic nature of the inputs\n(controlled by the start time stdev, and Burst stdev parameters), there\nis some variability in the histogram of proximal input times. The ~10 Hz\nbursts of distal input induces current flow down the pyramidal neuron\ndendrites decreasing the signal below the 0 nAm baseline, which then\nrelaxes back to zero, approximately every 100 ms. This is observed in\nthe black current dipole waveform in the figure. The bottom panel shows\nthe corresponding time-frequency spectrogram for this waveform that\nexhibits a high power continuous 10 Hz signal. Importantly, in this\nexample the strength of the distal input was also titrated to be\nsubthreshold (i.e., cells do not spike) under the assumption that\nmacroscale oscillations are generated primarily by subthreshold current\nflow across large populations of synchronous pyramidal neurons.</p>\n<p>While instructional, this simulation also does not produce waveform\nand spectral features that match the experimental data in Figures 1 and\n2. In the next step (step 3), we describe how combining both the 10 Hz\nproximal and distal drives can produce an oscillation with many\ncharacteristic features of the spontaneous SI signal (Jones et al\n2009).</p>\n\n</div>\n<div class='markdown-cell'>\n    <h2>3. Simulating Combined Rhythmic Proximal and Distal Inputs:\nAlpha/Beta Complex</h2>\n<p>In this simulation, the Start time mean (ms) values\n<code>tstart</code> for both proximal and distal inputs are set to 50.0\nms, and all other parameters are the same. Note that the synaptic\nweights are the same as used in the previous two simulations. The equal\nstart time implies that the proximal and distal input bursts will arrive\nnearly synchronously to the network on each cycle of the 10 Hz input.\nDue to the stochasticity in the parameters (start time stdev, and Burst\nstdev) sometimes the bursts will arrive together and sometimes there\nwill be a slight delay. As will be described further below, this"
        },
        "3.1 Define network and drives": {
            "level": 3,
            "html": "stochasticity creates intermittent alpha and beta events.</p>\n<h3>3.1 Define network and drives</h3>\n<p>We begin by instantiating the network, and adding drives with the\nsame functions as above. Note that the <code>event_seed</code> parameter\nmust be changed, otherwise the spike times of the proximal and distal\ndrive would be identical.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net_alpha_sync = jones_2009_model()\n\nnet_alpha_sync.add_bursty_drive(\n    'alpha_prox', tstart=50.0, tstart_std=0.0, burst_rate=10, burst_std=20, numspikes=2,\n    spike_isi=10, n_drive_cells=10, location='proximal',\n    weights_ampa=weights_ampa_p, synaptic_delays=syn_delays_p, event_seed=10)\n\nnet_alpha_sync.add_bursty_drive(\n    'alpha_dist', tstart=50.0, burst_rate=10, burst_std=20, numspikes=2,\n    spike_isi=10, n_drive_cells=10, location='distal',\n    weights_ampa=weights_ampa_d, synaptic_delays=syn_delays_d, event_seed=14)\n    </code>\n</div>"
        },
        "3.2 Run the simulation and visualize net current dipole": {
            "level": 3,
            "html": "<div class='markdown-cell'>\n    <h3>3.2 Run the simulation and visualize net current dipole</h3>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        with MPIBackend(n_procs=n_procs):\n    dpl_alpha_sync = simulate_dipole(net_alpha_sync, tstop=710.0, n_trials=1)\n\n# dpl_alpha_sync = simulate_dipole(net_alpha_sync, tstop=710.0, n_trials=1)\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        MPI will run 1 trial(s) sequentially by distributing network neurons over 8 processes.\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n\n        /usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n\n        numprocs=8\n\n        Loading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.soLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.soLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.soLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nBuilding the NEURON model\n\n\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\n\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\n\n        Loading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\n\n        [Done]\n\n        Trial 1: 0.03 ms...\n\n        Trial 1: 10.0 ms...\n\n        Trial 1: 20.0 ms...\n\n        Trial 1: 30.0 ms...\n\n        Trial 1: 40.0 ms...\n\n        Trial 1: 50.0 ms...\n\n        Trial 1: 60.0 ms...\n\n        Trial 1: 70.0 ms...\n\n        Trial 1: 80.0 ms...\n\n        Trial 1: 90.0 ms...\n\n        Trial 1: 100.0 ms...\n\n        Trial 1: 110.0 ms...\n\n        Trial 1: 120.0 ms...\n\n        Trial 1: 130.0 ms...\n\n        Trial 1: 140.0 ms...\n\n        Trial 1: 150.0 ms...\n\n        Trial 1: 160.0 ms...\n\n        Trial 1: 170.0 ms...\n\n        Trial 1: 180.0 ms...\n\n        Trial 1: 190.0 ms...\n\n        Trial 1: 200.0 ms...\n\n        Trial 1: 210.0 ms...\n\n        Trial 1: 220.0 ms...\n\n        Trial 1: 230.0 ms...\n\n        Trial 1: 240.0 ms...\n\n        Trial 1: 250.0 ms...\n\n        Trial 1: 260.0 ms...\n\n        Trial 1: 270.0 ms...\n\n        Trial 1: 280.0 ms...\n\n        Trial 1: 290.0 ms...\n\n        Trial 1: 300.0 ms...\n\n        Trial 1: 310.0 ms...\n\n        Trial 1: 320.0 ms...\n\n        Trial 1: 330.0 ms...\n\n        Trial 1: 340.0 ms...\n\n        Trial 1: 350.0 ms...\n\n        Trial 1: 360.0 ms...\n\n        Trial 1: 370.0 ms...\n\n        Trial 1: 380.0 ms...\n\n        Trial 1: 390.0 ms...\n\n        Trial 1: 400.0 ms...\n\n        Trial 1: 410.0 ms...\n\n        Trial 1: 420.0 ms...\n\n        Trial 1: 430.0 ms...\n\n        Trial 1: 440.0 ms...\n\n        Trial 1: 450.0 ms...\n\n        Trial 1: 460.0 ms...\n\n        Trial 1: 470.0 ms...\n\n        Trial 1: 480.0 ms...\n\n        Trial 1: 490.0 ms...\n\n        Trial 1: 500.0 ms...\n\n        Trial 1: 510.0 ms...\n\n        Trial 1: 520.0 ms...\n\n        Trial 1: 530.0 ms...\n\n        Trial 1: 540.0 ms...\n\n        Trial 1: 550.0 ms...\n\n        Trial 1: 560.0 ms...\n\n        Trial 1: 570.0 ms...\n\n        Trial 1: 580.0 ms...\n\n        Trial 1: 590.0 ms...\n\n        Trial 1: 600.0 ms...\n\n        Trial 1: 610.0 ms...\n\n        Trial 1: 620.0 ms...\n\n        Trial 1: 630.0 ms...\n\n        Trial 1: 640.0 ms...\n\n        Trial 1: 650.0 ms...\n\n        Trial 1: 660.0 ms...\n\n        Trial 1: 670.0 ms...\n\n        Trial 1: 680.0 ms...\n\n        Trial 1: 690.0 ms...\n\n        Trial 1: 700.0 ms...\n\n    </div>\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        simulation_plots(net_alpha_sync, dpl_alpha_sync)\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 700x700 with 4 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_api_alpha_beta/fig_05.png'/>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 700x700 with 4 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_api_alpha_beta/fig_06.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>As shown in the green and red histogram in the top panel of the\nfigure above, with this parameter set, bursts of both proximal and\ndistal input spikes are provided to the network ~10 Hz (i.e., every 100\nms). Due to the stochastic nature of the inputs, there is some\nvariability in the timing and duration of the input bursts such that\nsometimes they arrive at the same time and sometimes there is a slight\noffset between them. As a result, intermittent transient alpha and beta\nevents emerge in the time-frequency spectrogram. Alpha events are\nproduced when the inputs occur slightly out of phase and current flow is\npushed alternately up and down the dendrites for ~50 ms duration each\n(set by the length of the bursts inputs). Beta events occur when the\nburst inputs arrive more synchronously and the upward current flow is\ndisrupted by downward current flow for ~50 ms to effectively cut the\noscillation period in half. As such, the relative alpha to beta\nexpression can be controlled by the delay between the inputs and their\nrelative burst strengths. We will detail this further below (see step 6\nbelow).</p>\n<p>In contrast to the results from only proximal or distal input, since\nthe current in the pyramidal neurons is pushed both upward and downward\nin this simulation, the current dipole signal oscillates above and below\n0 nAm, which qualitatively matches the experimental data (see Figures 1\nand 2 in \u201cGetting Started\u201d). Additionally, this simulation reproduces\nthe transient nature of the alpha and beta activity and several other\nfeatures of the waveform and spectrogram can be quantified to show close\nagreement between model and experimental results (see Figure 2 above,\nand Jones et al.\u00a02009[1], for further details).</p>\n<p>We note that here we do not directly compare the spontaneous current\ndipole waveform to recorded data, as was done in the ERP tutorial with a\nroot mean squared error. This is due to the fact that the spontaneous SI\nsignal we are simulating is not time locked to alpha or beta events on\nany given trial, and the stochastic nature of the driving inputs causes\nvariability in the timing of the alpha or beta activity, making it\ndifficult to align recorded data and simulated results. However, a\ndirect comparison can be made between time averaged recorded and\nsimulated signals by comparing power spectral density waveforms. An\nexample of comparison is shown in step 5 below.</p>\n\n</div>\n<div class='markdown-cell'>\n    <h3>3.3 Simulating and averaging multiple trials with jittered start\ntimes creates the impression of continuous oscillations</h3>\n<p>As described in the \u201cGetting Started\u201d section above, our simulation\ngoal was to study the mechanisms that reproduce features of spontaneous\nalpha and beta rhythms observed in un-averaged data, where the alpha and\nbeta components are transient and intermittent (Figure 1, right panel).\nEach tutorial step up to this point was based on simulating un-averaged\ndata. Here, we describe how to run and average multiple \u201ctrials\u201d (700 ms\nepochs of spontaneous activity). We show that, due to the stochastic\nnature of the proximal and distal rhythmic input, controlled by the\nstandard deviation of the start times <code>tstart_std</code>, and the\nstdev of the input bursts <code>burst_std</code>, when running multiple\ntrials, the precise timing of the input bursts on each trial is\njittered, and hence the alpha and beta activity in the spectrograms on\neach trial is jittered. This is akin to simulating induced rhythms\nrather than time-locked evoked rhythms. In the averaged spectrogram\nacross trials, the alpha and beta events accumulate without cancellation\n(due to the fact that spectrogram value are purely positive) creating\nthe impression of a continuous oscillation (Figure 1, left panel).</p>\n<p>Below we illustrate the effects of \u201cjitter\u201d in the proximal and\ndistal rhythmic inputs across trials in two ways. First, we examine the\neffects of \u201cjitter\u201d due to the <code>burst_std</code>, and second due to\nthe <code>tstart_std</code>.</p>\n<p>To first test the effects of jittering due to <code>burst_std</code>\nand averaging across trials, we will use a drive configuration with\nrhythmic proximal and distal inputs provided at 10 Hz, with proximal and\ndistal inputs in phase. These are the same parameters as Step 3.2 above,\nbut now with 5 trials instead of 1.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net_alpha_trials = jones_2009_model()\n\nnet_alpha_trials.add_bursty_drive(\n    'alpha_prox', tstart=50.0, tstart_std=0.0, burst_rate=10, burst_std=20, numspikes=2,\n    spike_isi=10, n_drive_cells=10, location='proximal',\n    weights_ampa=weights_ampa_p, synaptic_delays=syn_delays_p, event_seed=10)\n\nnet_alpha_trials.add_bursty_drive(\n    'alpha_dist', tstart=50.0, tstart_std=0.0, burst_rate=10, burst_std=20, numspikes=2,\n    spike_isi=10, n_drive_cells=10, location='distal',\n    weights_ampa=weights_ampa_d, synaptic_delays=syn_delays_d, event_seed=15)\n    \nwith MPIBackend(n_procs=n_procs):\n    dpl_alpha_trials = simulate_dipole(net_alpha_trials, tstop=710.0, n_trials=5)\n\n# dpl_alpha_trials = simulate_dipole(net_alpha_trials, tstop=710.0, n_trials=5)\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        MPI will run 5 trial(s) sequentially by distributing network neurons over 8 processes.\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n\n        /usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n\n        numprocs=8\n\n        Loading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.soLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.soLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.soLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nBuilding the NEURON model\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\n\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\n\n\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\n\n        [Done]\n\n        Trial 1: 0.03 ms...\n\n        Trial 1: 10.0 ms...\n\n        Trial 1: 20.0 ms...\n\n        Trial 1: 30.0 ms...\n\n        Trial 1: 40.0 ms...\n\n        Trial 1: 50.0 ms...\n\n        Trial 1: 60.0 ms...\n\n        Trial 1: 70.0 ms...\n\n        Trial 1: 80.0 ms...\n\n        Trial 1: 90.0 ms...\n\n        Trial 1: 100.0 ms...\n\n        Trial 1: 110.0 ms...\n\n        Trial 1: 120.0 ms...\n\n        Trial 1: 130.0 ms...\n\n        Trial 1: 140.0 ms...\n\n        Trial 1: 150.0 ms...\n\n        Trial 1: 160.0 ms...\n\n        Trial 1: 170.0 ms...\n\n        Trial 1: 180.0 ms...\n\n        Trial 1: 190.0 ms...\n\n        Trial 1: 200.0 ms...\n\n        Trial 1: 210.0 ms...\n\n        Trial 1: 220.0 ms...\n\n        Trial 1: 230.0 ms...\n\n        Trial 1: 240.0 ms...\n\n        Trial 1: 250.0 ms...\n\n        Trial 1: 260.0 ms...\n\n        Trial 1: 270.0 ms...\n\n        Trial 1: 280.0 ms...\n\n        Trial 1: 290.0 ms...\n\n        Trial 1: 300.0 ms...\n\n        Trial 1: 310.0 ms...\n\n        Trial 1: 320.0 ms...\n\n        Trial 1: 330.0 ms...\n\n        Trial 1: 340.0 ms...\n\n        Trial 1: 350.0 ms...\n\n        Trial 1: 360.0 ms...\n\n        Trial 1: 370.0 ms...\n\n        Trial 1: 380.0 ms...\n\n        Trial 1: 390.0 ms...\n\n        Trial 1: 400.0 ms...\n\n        Trial 1: 410.0 ms...\n\n        Trial 1: 420.0 ms...\n\n        Trial 1: 430.0 ms...\n\n        Trial 1: 440.0 ms...\n\n        Trial 1: 450.0 ms...\n\n        Trial 1: 460.0 ms...\n\n        Trial 1: 470.0 ms...\n\n        Trial 1: 480.0 ms...\n\n        Trial 1: 490.0 ms...\n\n        Trial 1: 500.0 ms...\n\n        Trial 1: 510.0 ms...\n\n        Trial 1: 520.0 ms...\n\n        Trial 1: 530.0 ms...\n\n        Trial 1: 540.0 ms...\n\n        Trial 1: 550.0 ms...\n\n        Trial 1: 560.0 ms...\n\n        Trial 1: 570.0 ms...\n\n        Trial 1: 580.0 ms...\n\n        Trial 1: 590.0 ms...\n\n        Trial 1: 600.0 ms...\n\n        Trial 1: 610.0 ms...\n\n        Trial 1: 620.0 ms...\n\n        Trial 1: 630.0 ms...\n\n        Trial 1: 640.0 ms...\n\n        Trial 1: 650.0 ms...\n\n        Trial 1: 660.0 ms...\n\n        Trial 1: 670.0 ms...\n\n        Trial 1: 680.0 ms...\n\n        Trial 1: 690.0 ms...\n\n        Trial 1: 700.0 ms...\n\n        Building the NEURON model\n\n        [Done]\n\n        Trial 2: 0.03 ms...\n\n        Trial 2: 10.0 ms...\n\n        Trial 2: 20.0 ms...\n\n        Trial 2: 30.0 ms...\n\n        Trial 2: 40.0 ms...\n\n        Trial 2: 50.0 ms...\n\n        Trial 2: 60.0 ms...\n\n        Trial 2: 70.0 ms...\n\n        Trial 2: 80.0 ms...\n\n        Trial 2: 90.0 ms...\n\n        Trial 2: 100.0 ms...\n\n        Trial 2: 110.0 ms...\n\n        Trial 2: 120.0 ms...\n\n        Trial 2: 130.0 ms...\n\n        Trial 2: 140.0 ms...\n\n        Trial 2: 150.0 ms...\n\n        Trial 2: 160.0 ms...\n\n        Trial 2: 170.0 ms...\n\n        Trial 2: 180.0 ms...\n\n        Trial 2: 190.0 ms...\n\n        Trial 2: 200.0 ms...\n\n        Trial 2: 210.0 ms...\n\n        Trial 2: 220.0 ms...\n\n        Trial 2: 230.0 ms...\n\n        Trial 2: 240.0 ms...\n\n        Trial 2: 250.0 ms...\n\n        Trial 2: 260.0 ms...\n\n        Trial 2: 270.0 ms...\n\n        Trial 2: 280.0 ms...\n\n        Trial 2: 290.0 ms...\n\n        Trial 2: 300.0 ms...\n\n        Trial 2: 310.0 ms...\n\n        Trial 2: 320.0 ms...\n\n        Trial 2: 330.0 ms...\n\n        Trial 2: 340.0 ms...\n\n        Trial 2: 350.0 ms...\n\n        Trial 2: 360.0 ms...\n\n        Trial 2: 370.0 ms...\n\n        Trial 2: 380.0 ms...\n\n        Trial 2: 390.0 ms...\n\n        Trial 2: 400.0 ms...\n\n        Trial 2: 410.0 ms...\n\n        Trial 2: 420.0 ms...\n\n        Trial 2: 430.0 ms...\n\n        Trial 2: 440.0 ms...\n\n        Trial 2: 450.0 ms...\n\n        Trial 2: 460.0 ms...\n\n        Trial 2: 470.0 ms...\n\n        Trial 2: 480.0 ms...\n\n        Trial 2: 490.0 ms...\n\n        Trial 2: 500.0 ms...\n\n        Trial 2: 510.0 ms...\n\n        Trial 2: 520.0 ms...\n\n        Trial 2: 530.0 ms...\n\n        Trial 2: 540.0 ms...\n\n        Trial 2: 550.0 ms...\n\n        Trial 2: 560.0 ms...\n\n        Trial 2: 570.0 ms...\n\n        Trial 2: 580.0 ms...\n\n        Trial 2: 590.0 ms...\n\n        Trial 2: 600.0 ms...\n\n        Trial 2: 610.0 ms...\n\n        Trial 2: 620.0 ms...\n\n        Trial 2: 630.0 ms...\n\n        Trial 2: 640.0 ms...\n\n        Trial 2: 650.0 ms...\n\n        Trial 2: 660.0 ms...\n\n        Trial 2: 670.0 ms...\n\n        Trial 2: 680.0 ms...\n\n        Trial 2: 690.0 ms...\n\n        Trial 2: 700.0 ms...\n\n        Building the NEURON model\n\n        [Done]\n\n        Trial 3: 0.03 ms...\n\n        Trial 3: 10.0 ms...\n\n        Trial 3: 20.0 ms...\n\n        Trial 3: 30.0 ms...\n\n        Trial 3: 40.0 ms...\n\n        Trial 3: 50.0 ms...\n\n        Trial 3: 60.0 ms...\n\n        Trial 3: 70.0 ms...\n\n        Trial 3: 80.0 ms...\n\n        Trial 3: 90.0 ms...\n\n        Trial 3: 100.0 ms...\n\n        Trial 3: 110.0 ms...\n\n        Trial 3: 120.0 ms...\n\n        Trial 3: 130.0 ms...\n\n        Trial 3: 140.0 ms...\n\n        Trial 3: 150.0 ms...\n\n        Trial 3: 160.0 ms...\n\n        Trial 3: 170.0 ms...\n\n        Trial 3: 180.0 ms...\n\n        Trial 3: 190.0 ms...\n\n        Trial 3: 200.0 ms...\n\n        Trial 3: 210.0 ms...\n\n        Trial 3: 220.0 ms...\n\n        Trial 3: 230.0 ms...\n\n        Trial 3: 240.0 ms...\n\n        Trial 3: 250.0 ms...\n\n        Trial 3: 260.0 ms...\n\n        Trial 3: 270.0 ms...\n\n        Trial 3: 280.0 ms...\n\n        Trial 3: 290.0 ms...\n\n        Trial 3: 300.0 ms...\n\n        Trial 3: 310.0 ms...\n\n        Trial 3: 320.0 ms...\n\n        Trial 3: 330.0 ms...\n\n        Trial 3: 340.0 ms...\n\n        Trial 3: 350.0 ms...\n\n        Trial 3: 360.0 ms...\n\n        Trial 3: 370.0 ms...\n\n        Trial 3: 380.0 ms...\n\n        Trial 3: 390.0 ms...\n\n        Trial 3: 400.0 ms...\n\n        Trial 3: 410.0 ms...\n\n        Trial 3: 420.0 ms...\n\n        Trial 3: 430.0 ms...\n\n        Trial 3: 440.0 ms...\n\n        Trial 3: 450.0 ms...\n\n        Trial 3: 460.0 ms...\n\n        Trial 3: 470.0 ms...\n\n        Trial 3: 480.0 ms...\n\n        Trial 3: 490.0 ms...\n\n        Trial 3: 500.0 ms...\n\n        Trial 3: 510.0 ms...\n\n        Trial 3: 520.0 ms...\n\n        Trial 3: 530.0 ms...\n\n        Trial 3: 540.0 ms...\n\n        Trial 3: 550.0 ms...\n\n        Trial 3: 560.0 ms...\n\n        Trial 3: 570.0 ms...\n\n        Trial 3: 580.0 ms...\n\n        Trial 3: 590.0 ms...\n\n        Trial 3: 600.0 ms...\n\n        Trial 3: 610.0 ms...\n\n        Trial 3: 620.0 ms...\n\n        Trial 3: 630.0 ms...\n\n        Trial 3: 640.0 ms...\n\n        Trial 3: 650.0 ms...\n\n        Trial 3: 660.0 ms...\n\n        Trial 3: 670.0 ms...\n\n        Trial 3: 680.0 ms...\n\n        Trial 3: 690.0 ms...\n\n        Trial 3: 700.0 ms...\n\n        Building the NEURON model\n\n        [Done]\n\n        Trial 4: 0.03 ms...\n\n        Trial 4: 10.0 ms...\n\n        Trial 4: 20.0 ms...\n\n        Trial 4: 30.0 ms...\n\n        Trial 4: 40.0 ms...\n\n        Trial 4: 50.0 ms...\n\n        Trial 4: 60.0 ms...\n\n        Trial 4: 70.0 ms...\n\n        Trial 4: 80.0 ms...\n\n        Trial 4: 90.0 ms...\n\n        Trial 4: 100.0 ms...\n\n        Trial 4: 110.0 ms...\n\n        Trial 4: 120.0 ms...\n\n        Trial 4: 130.0 ms...\n\n        Trial 4: 140.0 ms...\n\n        Trial 4: 150.0 ms...\n\n        Trial 4: 160.0 ms...\n\n        Trial 4: 170.0 ms...\n\n        Trial 4: 180.0 ms...\n\n        Trial 4: 190.0 ms...\n\n        Trial 4: 200.0 ms...\n\n        Trial 4: 210.0 ms...\n\n        Trial 4: 220.0 ms...\n\n        Trial 4: 230.0 ms...\n\n        Trial 4: 240.0 ms...\n\n        Trial 4: 250.0 ms...\n\n        Trial 4: 260.0 ms...\n\n        Trial 4: 270.0 ms...\n\n        Trial 4: 280.0 ms...\n\n        Trial 4: 290.0 ms...\n\n        Trial 4: 300.0 ms...\n\n        Trial 4: 310.0 ms...\n\n        Trial 4: 320.0 ms...\n\n        Trial 4: 330.0 ms...\n\n        Trial 4: 340.0 ms...\n\n        Trial 4: 350.0 ms...\n\n        Trial 4: 360.0 ms...\n\n        Trial 4: 370.0 ms...\n\n        Trial 4: 380.0 ms...\n\n        Trial 4: 390.0 ms...\n\n        Trial 4: 400.0 ms...\n\n        Trial 4: 410.0 ms...\n\n        Trial 4: 420.0 ms...\n\n        Trial 4: 430.0 ms...\n\n        Trial 4: 440.0 ms...\n\n        Trial 4: 450.0 ms...\n\n        Trial 4: 460.0 ms...\n\n        Trial 4: 470.0 ms...\n\n        Trial 4: 480.0 ms...\n\n        Trial 4: 490.0 ms...\n\n        Trial 4: 500.0 ms...\n\n        Trial 4: 510.0 ms...\n\n        Trial 4: 520.0 ms...\n\n        Trial 4: 530.0 ms...\n\n        Trial 4: 540.0 ms...\n\n        Trial 4: 550.0 ms...\n\n        Trial 4: 560.0 ms...\n\n        Trial 4: 570.0 ms...\n\n        Trial 4: 580.0 ms...\n\n        Trial 4: 590.0 ms...\n\n        Trial 4: 600.0 ms...\n\n        Trial 4: 610.0 ms...\n\n        Trial 4: 620.0 ms...\n\n        Trial 4: 630.0 ms...\n\n        Trial 4: 640.0 ms...\n\n        Trial 4: 650.0 ms...\n\n        Trial 4: 660.0 ms...\n\n        Trial 4: 670.0 ms...\n\n        Trial 4: 680.0 ms...\n\n        Trial 4: 690.0 ms...\n\n        Trial 4: 700.0 ms...\n\n        Building the NEURON model\n\n        [Done]\n\n        Trial 5: 0.03 ms...\n\n        Trial 5: 10.0 ms...\n\n        Trial 5: 20.0 ms...\n\n        Trial 5: 30.0 ms...\n\n        Trial 5: 40.0 ms...\n\n        Trial 5: 50.0 ms...\n\n        Trial 5: 60.0 ms...\n\n        Trial 5: 70.0 ms...\n\n        Trial 5: 80.0 ms...\n\n        Trial 5: 90.0 ms...\n\n        Trial 5: 100.0 ms...\n\n        Trial 5: 110.0 ms...\n\n        Trial 5: 120.0 ms...\n\n        Trial 5: 130.0 ms...\n\n        Trial 5: 140.0 ms...\n\n        Trial 5: 150.0 ms...\n\n        Trial 5: 160.0 ms...\n\n        Trial 5: 170.0 ms...\n\n        Trial 5: 180.0 ms...\n\n        Trial 5: 190.0 ms...\n\n        Trial 5: 200.0 ms...\n\n        Trial 5: 210.0 ms...\n\n        Trial 5: 220.0 ms...\n\n        Trial 5: 230.0 ms...\n\n        Trial 5: 240.0 ms...\n\n        Trial 5: 250.0 ms...\n\n        Trial 5: 260.0 ms...\n\n        Trial 5: 270.0 ms...\n\n        Trial 5: 280.0 ms...\n\n        Trial 5: 290.0 ms...\n\n        Trial 5: 300.0 ms...\n\n        Trial 5: 310.0 ms...\n\n        Trial 5: 320.0 ms...\n\n        Trial 5: 330.0 ms...\n\n        Trial 5: 340.0 ms...\n\n        Trial 5: 350.0 ms...\n\n        Trial 5: 360.0 ms...\n\n        Trial 5: 370.0 ms...\n\n        Trial 5: 380.0 ms...\n\n        Trial 5: 390.0 ms...\n\n        Trial 5: 400.0 ms...\n\n        Trial 5: 410.0 ms...\n\n        Trial 5: 420.0 ms...\n\n        Trial 5: 430.0 ms...\n\n        Trial 5: 440.0 ms...\n\n        Trial 5: 450.0 ms...\n\n        Trial 5: 460.0 ms...\n\n        Trial 5: 470.0 ms...\n\n        Trial 5: 480.0 ms...\n\n        Trial 5: 490.0 ms...\n\n        Trial 5: 500.0 ms...\n\n        Trial 5: 510.0 ms...\n\n        Trial 5: 520.0 ms...\n\n        Trial 5: 530.0 ms...\n\n        Trial 5: 540.0 ms...\n\n        Trial 5: 550.0 ms...\n\n        Trial 5: 560.0 ms...\n\n        Trial 5: 570.0 ms...\n\n        Trial 5: 580.0 ms...\n\n        Trial 5: 590.0 ms...\n\n        Trial 5: 600.0 ms...\n\n        Trial 5: 610.0 ms...\n\n        Trial 5: 620.0 ms...\n\n        Trial 5: 630.0 ms...\n\n        Trial 5: 640.0 ms...\n\n        Trial 5: 650.0 ms...\n\n        Trial 5: 660.0 ms...\n\n        Trial 5: 670.0 ms...\n\n        Trial 5: 680.0 ms...\n\n        Trial 5: 690.0 ms...\n\n        Trial 5: 700.0 ms...\n\n    </div>\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Note that a spike is induced on certain trials\n# We have excluded trials with spikes since the high-amplitude dipole dominates the average spectrogram\nnospike_trials = [0,1,2,3]\ndpl_alpha_nospike = [dpl_alpha_trials[idx] for idx in nospike_trials]\nsimulation_plots(net_alpha_trials, dpl_alpha_nospike)\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 700x700 with 4 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_api_alpha_beta/fig_07.png'/>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 700x700 with 4 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_api_alpha_beta/fig_08.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>Notice that the input histograms for distal (green) and proximal\n(red) input accumulated across the 5 trials, now have higher values than\nbefore (up to ~20 compared to 5 in Step 3.2) and the burst inputs are\nslightly broader on each cycle, since these histograms represent the\naccumulated activity from 10 simulations, where the standard deviation\nin the Burst duration across trials is 20 ms. Approximately 10 Hz\nrhythmicity in the timing of the distal and proximal inputs can be\nclearly visualized (note also the symmetric profile of the histograms).\nHowever, on any individual trial, the coincidence of inputs leading to\nalpha or beta events displays some variability due to the stochastic\nparameter value (Burst stdev=20 ms). This is observed in the dipole\nwaveforms shown for each trial (example shown below). The spectrogram\nshown is now created by calculating the spectrogram from each of the 5\ntrials separately, then averaging the 5 spectrograms. Importantly, this\nis not the spectrogram of the average of the dipole waveforms. The\naveraged spectrogram above shows more continuous bands of alpha and beta\nactivity than for a single trial (compare to spectrogram in Step 3).\nRunning more trials will increase the appearance of continuous\nrhythms.</p>\n<p>In the next simulation, we will jitter the start times of rhythmic\ninputs across trials with the <code>tstartd_std</code>, in addition to a\nnon-zero <code>burst_std</code>. This will add additional variability to\nthe timing of the transient alpha and beta events on each trial, and\nhence produce even more continuous bands of activity in the averaged\nspectrogram.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net_alpha_jitter = jones_2009_model()\n\nnet_alpha_jitter.add_bursty_drive(\n    'alpha_prox', tstart=50.0, tstart_std=50.0, burst_rate=10, burst_std=20, numspikes=2,\n    spike_isi=10, n_drive_cells=10, location='proximal',\n    weights_ampa=weights_ampa_p, synaptic_delays=syn_delays_p, event_seed=10)\n\nnet_alpha_jitter.add_bursty_drive(\n    'alpha_dist', tstart=50.0, tstart_std=50.0, burst_rate=10, burst_std=20, numspikes=2,\n    spike_isi=10, n_drive_cells=10, location='distal',\n    weights_ampa=weights_ampa_d, synaptic_delays=syn_delays_d, event_seed=14)\n\nwith MPIBackend(n_procs=n_procs):\n    dpl_alpha_jitter = simulate_dipole(net_alpha_jitter, tstop=710.0, n_trials=5)\n\n# dpl_alpha_jitter = simulate_dipole(net_alpha_jitter, tstop=710.0, n_trials=5)\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        MPI will run 5 trial(s) sequentially by distributing network neurons over 8 processes.\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n\n        /usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n\n        /usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n/usr/share/miniconda/envs/website-redesign-mpi/bin/nrniv:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import working_set\n\n        numprocs=8\n\n        Loading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nBuilding the NEURON model\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\n\n        Loading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/website-redesign-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\n\n        [Done]\n\n        Trial 1: 0.03 ms...\n\n        Trial 1: 10.0 ms...\n\n        Trial 1: 20.0 ms...\n\n        Trial 1: 30.0 ms...\n\n        Trial 1: 40.0 ms...\n\n        Trial 1: 50.0 ms...\n\n        Trial 1: 60.0 ms...\n\n        Trial 1: 70.0 ms...\n\n        Trial 1: 80.0 ms...\n\n        Trial 1: 90.0 ms...\n\n        Trial 1: 100.0 ms...\n\n        Trial 1: 110.0 ms...\n\n        Trial 1: 120.0 ms...\n\n        Trial 1: 130.0 ms...\n\n        Trial 1: 140.0 ms...\n\n        Trial 1: 150.0 ms...\n\n        Trial 1: 160.0 ms...\n\n        Trial 1: 170.0 ms...\n\n        Trial 1: 180.0 ms...\n\n        Trial 1: 190.0 ms...\n\n        Trial 1: 200.0 ms...\n\n        Trial 1: 210.0 ms...\n\n        Trial 1: 220.0 ms...\n\n        Trial 1: 230.0 ms...\n\n        Trial 1: 240.0 ms...\n\n        Trial 1: 250.0 ms...\n\n        Trial 1: 260.0 ms...\n\n        Trial 1: 270.0 ms...\n\n        Trial 1: 280.0 ms...\n\n        Trial 1: 290.0 ms...\n\n        Trial 1: 300.0 ms...\n\n        Trial 1: 310.0 ms...\n\n        Trial 1: 320.0 ms...\n\n        Trial 1: 330.0 ms...\n\n        Trial 1: 340.0 ms...\n\n        Trial 1: 350.0 ms...\n\n        Trial 1: 360.0 ms...\n\n        Trial 1: 370.0 ms...\n\n        Trial 1: 380.0 ms...\n\n        Trial 1: 390.0 ms...\n\n        Trial 1: 400.0 ms...\n\n        Trial 1: 410.0 ms...\n\n        Trial 1: 420.0 ms...\n\n        Trial 1: 430.0 ms...\n\n        Trial 1: 440.0 ms...\n\n        Trial 1: 450.0 ms...\n\n        Trial 1: 460.0 ms...\n\n        Trial 1: 470.0 ms...\n\n        Trial 1: 480.0 ms...\n\n        Trial 1: 490.0 ms...\n\n        Trial 1: 500.0 ms...\n\n        Trial 1: 510.0 ms...\n\n        Trial 1: 520.0 ms...\n\n        Trial 1: 530.0 ms...\n\n        Trial 1: 540.0 ms...\n\n        Trial 1: 550.0 ms...\n\n        Trial 1: 560.0 ms...\n\n        Trial 1: 570.0 ms...\n\n        Trial 1: 580.0 ms...\n\n        Trial 1: 590.0 ms...\n\n        Trial 1: 600.0 ms...\n\n        Trial 1: 610.0 ms...\n\n        Trial 1: 620.0 ms...\n\n        Trial 1: 630.0 ms...\n\n        Trial 1: 640.0 ms...\n\n        Trial 1: 650.0 ms...\n\n        Trial 1: 660.0 ms...\n\n        Trial 1: 670.0 ms...\n\n        Trial 1: 680.0 ms...\n\n        Trial 1: 690.0 ms...\n\n        Trial 1: 700.0 ms...\n\n        Building the NEURON model\n\n        [Done]\n\n        Trial 2: 0.03 ms...\n\n        Trial 2: 10.0 ms...\n\n        Trial 2: 20.0 ms...\n\n        Trial 2: 30.0 ms...\n\n        Trial 2: 40.0 ms...\n\n        Trial 2: 50.0 ms...\n\n        Trial 2: 60.0 ms...\n\n        Trial 2: 70.0 ms...\n\n        Trial 2: 80.0 ms...\n\n        Trial 2: 90.0 ms...\n\n        Trial 2: 100.0 ms...\n\n        Trial 2: 110.0 ms...\n\n        Trial 2: 120.0 ms...\n\n        Trial 2: 130.0 ms...\n\n        Trial 2: 140.0 ms...\n\n        Trial 2: 150.0 ms...\n\n        Trial 2: 160.0 ms...\n\n        Trial 2: 170.0 ms...\n\n        Trial 2: 180.0 ms...\n\n        Trial 2: 190.0 ms...\n\n        Trial 2: 200.0 ms...\n\n        Trial 2: 210.0 ms...\n\n        Trial 2: 220.0 ms...\n\n        Trial 2: 230.0 ms...\n\n        Trial 2: 240.0 ms...\n\n        Trial 2: 250.0 ms...\n\n        Trial 2: 260.0 ms...\n\n        Trial 2: 270.0 ms...\n\n        Trial 2: 280.0 ms...\n\n        Trial 2: 290.0 ms...\n\n        Trial 2: 300.0 ms...\n\n        Trial 2: 310.0 ms...\n\n        Trial 2: 320.0 ms...\n\n        Trial 2: 330.0 ms...\n\n        Trial 2: 340.0 ms...\n\n        Trial 2: 350.0 ms...\n\n        Trial 2: 360.0 ms...\n\n        Trial 2: 370.0 ms...\n\n        Trial 2: 380.0 ms...\n\n        Trial 2: 390.0 ms...\n\n        Trial 2: 400.0 ms...\n\n        Trial 2: 410.0 ms...\n\n        Trial 2: 420.0 ms...\n\n        Trial 2: 430.0 ms...\n\n        Trial 2: 440.0 ms...\n\n        Trial 2: 450.0 ms...\n\n        Trial 2: 460.0 ms...\n\n        Trial 2: 470.0 ms...\n\n        Trial 2: 480.0 ms...\n\n        Trial 2: 490.0 ms...\n\n        Trial 2: 500.0 ms...\n\n        Trial 2: 510.0 ms...\n\n        Trial 2: 520.0 ms...\n\n        Trial 2: 530.0 ms...\n\n        Trial 2: 540.0 ms...\n\n        Trial 2: 550.0 ms...\n\n        Trial 2: 560.0 ms...\n\n        Trial 2: 570.0 ms...\n\n        Trial 2: 580.0 ms...\n\n        Trial 2: 590.0 ms...\n\n        Trial 2: 600.0 ms...\n\n        Trial 2: 610.0 ms...\n\n        Trial 2: 620.0 ms...\n\n        Trial 2: 630.0 ms...\n\n        Trial 2: 640.0 ms...\n\n        Trial 2: 650.0 ms...\n\n        Trial 2: 660.0 ms...\n\n        Trial 2: 670.0 ms...\n\n        Trial 2: 680.0 ms...\n\n        Trial 2: 690.0 ms...\n\n        Trial 2: 700.0 ms...\n\n        Building the NEURON model\n\n        [Done]\n\n        Trial 3: 0.03 ms...\n\n        Trial 3: 10.0 ms...\n\n        Trial 3: 20.0 ms...\n\n        Trial 3: 30.0 ms...\n\n        Trial 3: 40.0 ms...\n\n        Trial 3: 50.0 ms...\n\n        Trial 3: 60.0 ms...\n\n        Trial 3: 70.0 ms...\n\n        Trial 3: 80.0 ms...\n\n        Trial 3: 90.0 ms...\n\n        Trial 3: 100.0 ms...\n\n        Trial 3: 110.0 ms...\n\n        Trial 3: 120.0 ms...\n\n        Trial 3: 130.0 ms...\n\n        Trial 3: 140.0 ms...\n\n        Trial 3: 150.0 ms...\n\n        Trial 3: 160.0 ms...\n\n        Trial 3: 170.0 ms...\n\n        Trial 3: 180.0 ms...\n\n        Trial 3: 190.0 ms...\n\n        Trial 3: 200.0 ms...\n\n        Trial 3: 210.0 ms...\n\n        Trial 3: 220.0 ms...\n\n        Trial 3: 230.0 ms...\n\n        Trial 3: 240.0 ms...\n\n        Trial 3: 250.0 ms...\n\n        Trial 3: 260.0 ms...\n\n        Trial 3: 270.0 ms...\n\n        Trial 3: 280.0 ms...\n\n        Trial 3: 290.0 ms...\n\n        Trial 3: 300.0 ms...\n\n        Trial 3: 310.0 ms...\n\n        Trial 3: 320.0 ms...\n\n        Trial 3: 330.0 ms...\n\n        Trial 3: 340.0 ms...\n\n        Trial 3: 350.0 ms...\n\n        Trial 3: 360.0 ms...\n\n        Trial 3: 370.0 ms...\n\n        Trial 3: 380.0 ms...\n\n        Trial 3: 390.0 ms...\n\n        Trial 3: 400.0 ms...\n\n        Trial 3: 410.0 ms...\n\n        Trial 3: 420.0 ms...\n\n        Trial 3: 430.0 ms...\n\n        Trial 3: 440.0 ms...\n\n        Trial 3: 450.0 ms...\n\n        Trial 3: 460.0 ms...\n\n        Trial 3: 470.0 ms...\n\n        Trial 3: 480.0 ms...\n\n        Trial 3: 490.0 ms...\n\n        Trial 3: 500.0 ms...\n\n        Trial 3: 510.0 ms...\n\n        Trial 3: 520.0 ms...\n\n        Trial 3: 530.0 ms...\n\n        Trial 3: 540.0 ms...\n\n        Trial 3: 550.0 ms...\n\n        Trial 3: 560.0 ms...\n\n        Trial 3: 570.0 ms...\n\n        Trial 3: 580.0 ms...\n\n        Trial 3: 590.0 ms...\n\n        Trial 3: 600.0 ms...\n\n        Trial 3: 610.0 ms...\n\n        Trial 3: 620.0 ms...\n\n        Trial 3: 630.0 ms...\n\n        Trial 3: 640.0 ms...\n\n        Trial 3: 650.0 ms...\n\n        Trial 3: 660.0 ms...\n\n        Trial 3: 670.0 ms...\n\n        Trial 3: 680.0 ms...\n\n        Trial 3: 690.0 ms...\n\n        Trial 3: 700.0 ms...\n\n        Building the NEURON model\n\n        [Done]\n\n        Trial 4: 0.03 ms...\n\n        Trial 4: 10.0 ms...\n\n        Trial 4: 20.0 ms...\n\n        Trial 4: 30.0 ms...\n\n        Trial 4: 40.0 ms...\n\n        Trial 4: 50.0 ms...\n\n        Trial 4: 60.0 ms...\n\n        Trial 4: 70.0 ms...\n\n        Trial 4: 80.0 ms...\n\n        Trial 4: 90.0 ms...\n\n        Trial 4: 100.0 ms...\n\n        Trial 4: 110.0 ms...\n\n        Trial 4: 120.0 ms...\n\n        Trial 4: 130.0 ms...\n\n        Trial 4: 140.0 ms...\n\n        Trial 4: 150.0 ms...\n\n        Trial 4: 160.0 ms...\n\n        Trial 4: 170.0 ms...\n\n        Trial 4: 180.0 ms...\n\n        Trial 4: 190.0 ms...\n\n        Trial 4: 200.0 ms...\n\n        Trial 4: 210.0 ms...\n\n        Trial 4: 220.0 ms...\n\n        Trial 4: 230.0 ms...\n\n        Trial 4: 240.0 ms...\n\n        Trial 4: 250.0 ms...\n\n        Trial 4: 260.0 ms...\n\n        Trial 4: 270.0 ms...\n\n        Trial 4: 280.0 ms...\n\n        Trial 4: 290.0 ms...\n\n        Trial 4: 300.0 ms...\n\n        Trial 4: 310.0 ms...\n\n        Trial 4: 320.0 ms...\n\n        Trial 4: 330.0 ms...\n\n        Trial 4: 340.0 ms...\n\n        Trial 4: 350.0 ms...\n\n        Trial 4: 360.0 ms...\n\n        Trial 4: 370.0 ms...\n\n        Trial 4: 380.0 ms...\n\n        Trial 4: 390.0 ms...\n\n        Trial 4: 400.0 ms...\n\n        Trial 4: 410.0 ms...\n\n        Trial 4: 420.0 ms...\n\n        Trial 4: 430.0 ms...\n\n        Trial 4: 440.0 ms...\n\n        Trial 4: 450.0 ms...\n\n        Trial 4: 460.0 ms...\n\n        Trial 4: 470.0 ms...\n\n        Trial 4: 480.0 ms...\n\n        Trial 4: 490.0 ms...\n\n        Trial 4: 500.0 ms...\n\n        Trial 4: 510.0 ms...\n\n        Trial 4: 520.0 ms...\n\n        Trial 4: 530.0 ms...\n\n        Trial 4: 540.0 ms...\n\n        Trial 4: 550.0 ms...\n\n        Trial 4: 560.0 ms...\n\n        Trial 4: 570.0 ms...\n\n        Trial 4: 580.0 ms...\n\n        Trial 4: 590.0 ms...\n\n        Trial 4: 600.0 ms...\n\n        Trial 4: 610.0 ms...\n\n        Trial 4: 620.0 ms...\n\n        Trial 4: 630.0 ms...\n\n        Trial 4: 640.0 ms...\n\n        Trial 4: 650.0 ms...\n\n        Trial 4: 660.0 ms...\n\n        Trial 4: 670.0 ms...\n\n        Trial 4: 680.0 ms...\n\n        Trial 4: 690.0 ms...\n\n        Trial 4: 700.0 ms...\n\n        Building the NEURON model\n\n        [Done]\n\n        Trial 5: 0.03 ms...\n\n        Trial 5: 10.0 ms...\n\n        Trial 5: 20.0 ms...\n\n        Trial 5: 30.0 ms...\n\n        Trial 5: 40.0 ms...\n\n        Trial 5: 50.0 ms...\n\n        Trial 5: 60.0 ms...\n\n        Trial 5: 70.0 ms...\n\n        Trial 5: 80.0 ms...\n\n        Trial 5: 90.0 ms...\n\n        Trial 5: 100.0 ms...\n\n        Trial 5: 110.0 ms...\n\n        Trial 5: 120.0 ms...\n\n        Trial 5: 130.0 ms...\n\n        Trial 5: 140.0 ms...\n\n        Trial 5: 150.0 ms...\n\n        Trial 5: 160.0 ms...\n\n        Trial 5: 170.0 ms...\n\n        Trial 5: 180.0 ms...\n\n        Trial 5: 190.0 ms...\n\n        Trial 5: 200.0 ms...\n\n        Trial 5: 210.0 ms...\n\n        Trial 5: 220.0 ms...\n\n        Trial 5: 230.0 ms...\n\n        Trial 5: 240.0 ms...\n\n        Trial 5: 250.0 ms...\n\n        Trial 5: 260.0 ms...\n\n        Trial 5: 270.0 ms...\n\n        Trial 5: 280.0 ms...\n\n        Trial 5: 290.0 ms...\n\n        Trial 5: 300.0 ms...\n\n        Trial 5: 310.0 ms...\n\n        Trial 5: 320.0 ms...\n\n        Trial 5: 330.0 ms...\n\n        Trial 5: 340.0 ms...\n\n        Trial 5: 350.0 ms...\n\n        Trial 5: 360.0 ms...\n\n        Trial 5: 370.0 ms...\n\n        Trial 5: 380.0 ms...\n\n        Trial 5: 390.0 ms...\n\n        Trial 5: 400.0 ms...\n\n        Trial 5: 410.0 ms...\n\n        Trial 5: 420.0 ms...\n\n        Trial 5: 430.0 ms...\n\n        Trial 5: 440.0 ms...\n\n        Trial 5: 450.0 ms...\n\n        Trial 5: 460.0 ms...\n\n        Trial 5: 470.0 ms...\n\n        Trial 5: 480.0 ms...\n\n        Trial 5: 490.0 ms...\n\n        Trial 5: 500.0 ms...\n\n        Trial 5: 510.0 ms...\n\n        Trial 5: 520.0 ms...\n\n        Trial 5: 530.0 ms...\n\n        Trial 5: 540.0 ms...\n\n        Trial 5: 550.0 ms...\n\n        Trial 5: 560.0 ms...\n\n        Trial 5: 570.0 ms...\n\n        Trial 5: 580.0 ms...\n\n        Trial 5: 590.0 ms...\n\n        Trial 5: 600.0 ms...\n\n        Trial 5: 610.0 ms...\n\n        Trial 5: 620.0 ms...\n\n        Trial 5: 630.0 ms...\n\n        Trial 5: 640.0 ms...\n\n        Trial 5: 650.0 ms...\n\n        Trial 5: 660.0 ms...\n\n        Trial 5: 670.0 ms...\n\n        Trial 5: 680.0 ms...\n\n        Trial 5: 690.0 ms...\n\n        Trial 5: 700.0 ms...\n\n    </div>\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        simulation_plots(net_alpha_jitter, dpl_alpha_jitter)\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 700x700 with 4 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_api_alpha_beta/fig_09.png'/>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 700x700 with 4 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_api_alpha_beta/fig_010.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>Notice that the input histograms for distal (green) and proximal\n(red) input accumulated across the 5 trials now show little rhythmicity\ndue to the jitter in the rhythmic input start times across trials (Start\ntime stdv (ms) = 50), in addition to jitter due to the Burst stdev (ms)\n= 20. However, if we were to visualize histograms on each individual\ntrial (using the View spectrograms tab), they would show the ~10 Hz and\n20 Hz (alpha and beta) rhythmicity. It is also difficult to visualize\nrhythmicity in any of the overlaid dipole waveforms. However, on each\ntrial, alpha and beta rhythmicity is present, and even more continuous\nbands of alpha and beta activity are observed (compare to averaged data\nin Figure 1 left panel; n=100 trials) when the spectrograms from\nindividual trials are averaged. Running more trials will further\nincrease the continuous nature of alpha and beta activity across\ntime.</p>\n\n</div>"
        },
        "3.4 Viewing network spiking activity": {
            "level": 3,
            "html": "<div class='markdown-cell'>\n    <h3>3.4 Viewing network spiking activity</h3>\n<p>AES TODO</p>\n\n</div>"
        },
        "4. Calculating and Viewing Power Spectral Density (PSD)": {
            "level": 2,
            "html": "<div class='markdown-cell'>\n    <h2>4. Calculating and Viewing Power Spectral Density (PSD)</h2>\n\n</div>\n<div class='markdown-cell'>\n    <p>HNN provides a feature to calculate and view the power spectral\ndensity (PSD) of the simulated signal and imported data (Note: the PSD\nis calculated as the time average of the spectrogram, in the simulation\nexamples).</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        plot_psd(dpl_alpha_jitter, fmin=1.0, fmax=1e3, show=False)\nplt.xscale('log')\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 640x480 with 1 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_api_alpha_beta/fig_11.png'/>\n</div>\n<div class='markdown-cell'>\n    <h2>5. (AES TODO re-introduce) Comparing model output and recorded\ndata</h2>\n<p>We can also use HNN to compare model-generated to empirical PSD,\nwhich represents the averaged activity across time. As discussed above,\nHNN does not provide means to directly compare spontaneous time domain\nrhythmic waveforms to data, due to the fact that spontaneous rhythms are\nnot time linked to specific events making it difficult to align recorded\ndata and simulated results. However, a direct comparison can be made\nbetween time averaged recorded and simulated signals by comparing PSD\nplots. To do so, you will need time-series of MEG data in a format that\nHNN can read (more details on this are provided in the Viewing\nDatatutorial). The S1_ongoing.txt file will be used in the following\nexample (note: S1_ongoing.txt is also provided with HNN in its\ndata/MEG_detection_data sub-folder). This file contains raw data source\nlocalized to SI from the 1 second prestimulus period before a tactile\nstimulus, during the tactile detection experiment described in the\n\u201cGetting Started\u201d section above[1]. You will need to extract the\ncontents of the .zip file to access the text file within. The data was\ncollected at 600 Hz. (Note, when loading your own data, if it was not\ncollected at 600 Hz, you must first downsample to 600 Hz to run a\nfrequency analysis and view it in the HNN GUI.)</p>\n<p>Once you have downloaded the example data, you can load it into HNN\nby first starting HNN\u2019s PSD Viewer from main GUI window (View&gt; View\nPSD). From HNN\u2019s PSD Viewer, click:</p>\n<p>File &gt; Load Data File</p>\n<p>Then select the data file from your local machine. HNN will calculate\nthe PSD from the time-series data and overlay it on the simulation PSD\nfor comparison.</p>\n<p>Below is an example output using the S1_ongoing file provided above.\nThe viewer will display the average PSD across trials and also the\nstandard error (displayed as dotted lines). Figure 17</p>\n<p>image 15</p>\n<p>In this example, there is strong similarity in the shape and\namplitude of the PSD generated by the model (bottom white traces) and\nthe PSD from experimental MEG data (bottom violet traces).</p>\n<p>You can also load data directly into the \u201cHNN Spectrogram Viewer\u201d. To\nload a single trial example of spontaneous SI activity from data\nprovided, first start the HNN Spectrogram Viewer by clicking View\nSpectrogramsfrom HNN\u2019s View menu in then main GUI. Then, click:</p>\n<p>File &gt; Load Data File</p>\n<p>And load the file S1_ongoing.txt. Next, select Trial 32 (for example)\nfrom the drop-down menu at the bottom of the viewer. You will see the\nfollowing display. Figure 18</p>\n<p>image10</p>\n<p>Notice that as shown in the \u201cGetting Started\u201d section above (Figure\n1), this single trial example of spontaneous SI data exhibits\nnon-continuous brief alpha and beta events. Since these data are\nspontaneous and non-time locked, it would be difficult to directly\ncompare to simulated data. Instead, we compare qualitative features\nbetween data and simulation results, as in Figure 2 above. See also Step\n6.4 below, where multiple trials of spontaneous SI data are simulated\nand averaged, producing more continuous bands of alpha and beta\nactivity.</p>\n\n</div>"
        },
        "5. Adjusting parameters": {
            "level": 2,
            "html": "<div class='markdown-cell'>\n    <h2>5. Adjusting parameters</h2>\n<p>Parameter adjustments will be key to developing and testing\nhypotheses on the circuit origin of your own low-frequency rhythmic\ndata.</p>\n<p>Here, we\u2019ll walk through examples with \u201cRhythmic Proximal/Distal\nInput\u201d parameters to investigate how they impact the alpha and beta\nrhythms described above. We encourage you to copy the code from the\nprevious excercises, and adjust the parameters as indicated. We end with\nsome suggested exercises for further exploration.</p>\n<h3>5.1 Changing the strength (post-synaptic conductance) and synchrony\nof the distal drive increases beta activity</h3>\n<p>We described above (Step 3) that the timing of proximal and distal\ninputs can lead to either alpha events (when the bursts arrive to the\nlocal network out of phase) or beta events (when the bursts arrive in\nphase).</p>\n<p>We have also found that other factors that contribute to the\nprevalence of beta activity are the strengthend synchrony of the distal\ninputs; beta activity is increased with stronger and more synchronous\nsubthreshold drive, where the beta frequency is set by the duration of\nthe driving bursts (~50ms) (Jones et al.\u00a02009; Sherman et al.\u00a02016). The\nstrength is controlled by the postsynaptic conductance set in the\n<code>weights_ampa</code> dictionary, and the synchrony is controlled by\nthe <code>burst_std</code> parameter.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Your code here\n    </code>\n</div>"
        },
        "5.1.1 Exercise for further exploration": {
            "level": 3,
            "html": "<div class='markdown-cell'>\n    <h3>5.1.1 Exercise for further exploration</h3>\n<p>Try changing the frequency of the rhythmic distal drive from 10 Hz to\n20 Hz by setting <code>burst_rate</code>. Try other frequencies for the\nproximal and distal rhythmic drive. How do the rhythms change? See how\nchanges in the Burst stdev effects the rhythms expressed.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Your code here\n\n    </code>\n</div>\n<div class='markdown-cell'>\n    <h3>5.2 Increasing the strength (post-synaptic conductance) of the\ndistal drive further creates high frequency responses due to induced\nspiking activity</h3>\n<p>Recall that in the above simulations, the strength of the rhythmic\nproximal and distal inputs were chosen so that the cells remained\nsubthreshold (no spiking). We will now demonstrate what happens if we\nincrease the strength of the inputs far enough to induce spikes. Instead\nof simulating subthreshold alpha/beta events, we will see that the\ndipole signals are dominated by higher-frequency events created by\nspiking activity. We note that the produced waveforms of activity are,\nto our knowledge, not typically observed in MEG or EEG data, supporting\nthe notion that alpha/beta rhythms are created through subthreshold\nprocesses.</p>\n<p>To test this, change the parameters for the bursty distal drive as\nfollows. First, change <code>burst_std</code> value back to 20 ms. Next,\nincrease the postsynaptic conductance weights of the AMPA synapses onto\nthe Layer 2/3 and Layer 5 pyramidal neurons from 6e-5\n<math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">\u03bc</mi><mi mathvariant=\"normal\">S</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{\\mu S}</annotation></semantics></math>\nto 40e-5\n<math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">\u03bc</mi><mi mathvariant=\"normal\">S</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{\\mu S}</annotation></semantics></math>\n(a big change that will provide enough current to cause the cells to\nspike).</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Your code here\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Notice that the histogram profile of the distal input bursts are once\nagain wider corresponding to less synchronous input and comparable to\nthose shown in the example in Step 3. However, in this case the\npostsynaptic conductance of these driving spike is significantly larger\n(40e-5\n<math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">\u03bc</mi><mi mathvariant=\"normal\">S</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{\\mu S}</annotation></semantics></math>).\nThis strong input induces spiking activity in the pyramidal neuron on\nseveral cycles of the drive resulting in a sharp and rapidly oscillating\ndipole waveform. The corresponding dipole spectrogram shows broadband\nspiking from ~60-120 Hz. This type of activity is not typically seen in\nEEG or MEG data, and hence unlikely to underlie macroscale\nrecordings.</p>\n<p>We can verify the increase in high-frequency activity more directly\nby viewing the simulation\u2019s power spectral density (PSD) with the\n<code>plot_psd()</code> function.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Your code here\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>The PSD from the simulation shows broadband 60-120Hz high frequency\nactivity caused by neuronal spiking. We can verify that the neurons are\nspiking by looking at the spiking raster plots. This is done with a\nfunction associated with the <code>Network</code> object and can be run\nusing <code>net.cell_response.plot_spikes_raster()</code>.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Your code here\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Notice that highly synchronous neuronal spiking in each population\ncoincides with the high-frequency events seen in the waveform and\nspectrogram. The waveform response is induced by the pyramidal neuron\nspiking which creates rapid back-propagating action potentials and\nrepolarization of the dendrites.</p>\n<p>Hypothesis testing: This simulation demonstrates that HNN can be used\nto test the limits of physiological variables and to see how, as\nparameters are varied, simulations results can be similar or dissimilar"
        },
        "5.2.1 Exercise for further exploration": {
            "level": 3,
            "html": "to experimental data.</p>\n<h3>5.2.1 Exercise for further exploration</h3>\n<p>View the contribution of Layer 2/3 and Layer 5 to the net current\ndipole waveform and compare with the spiking activity in each\npopulation. This can be done with\n<code>plot_dipole(dpl, layer=&amp;#x27;L2&amp;#x27;)</code> or\n<code>plot_dipole(dpl, layer=&amp;#x27;L5&amp;#x27;)</code>. How do each\ncontribute? Try also to change the proximal input parameters instead of\nthe distal input parameters.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Your code here\n    </code>\n</div>\n<div class='markdown-cell'>\n    <h3>5.3 Increasing the delay between the proximal and distal inputs to\nanti-phase (50 ms delay) creates continuous alpha oscillations without\nbeta activity</h3>\n<p>We mentioned above that, in addition to parameters controlling the\nstrength and synchrony of the distal (or proximal) drive, the relative\ntiming of proximal and distal inputs is an important factor in\ndetermining relative alpha and beta expression in the model. Here we\nwill demonstrate that out-of-phase, 10 Hz burst inputs can produce\ncontinuous alpha activity without any beta events.</p>\n<p>First, copy the parameters from Step 3.1. Next, in for the rhythmic\ndistal inputs, change <code>tstart</code> from 50 to 100 ms.</p>\n<p>Note that both the proximal and distal input <code>burst_rate</code>\nare set to 10 Hz (bursts of activity every ~100 ms). Since the proximal\ninput Start time mean is 50.0 ms and the the distal input Start time\nmean is 100.0 ms, the input will, on average, arrive to the network a\n1/2 cycle out of phase (i.e., in antiphase, every 50 ms).</p>\n<p>Next, we will run the simulation to investigate the impact of this\nparameter change.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Your code here\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Notice that the histogram profile of the proximal and distal input\nbursts are generally \u00bd cycle out-of-phase (antiphase). This rhythmic\nalteration of proximal followed by distal drive induces alternating\nsubthreshold current flow up and down the pyramidal neuron dendrites to\ncreate a continuous alpha oscillation in the current dipole waveform\nthat oscillates around 0 nAm. The period of the oscillation is set by\nthe duration of each burst (~50 ms, controlled in part by Burst stdev)\nand the 50 ms delay between the inputs on each cycle (due to different\nstart times). The corresponding spectrogram shows continuous nearly pure\nalpha activity. This type of strong alpha activity is similar to what\nmight be observed over occipital cortex during eyes closed"
        },
        "5.3.1 Exercise for further exploration": {
            "level": 3,
            "html": "conditions.</p>\n<h3>5.3.1 Exercise for further exploration</h3>\n<p>Try changing the delay between the proximal and distal drive by\nvarying amounts. What happens to the rhythm expressed?</p>\n<p>Can you create a simulation where other frequencies are expressed?\nHow is it created? Are the cells spiking or subthreshold?</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Your code here\n    </code>\n</div>"
        },
        "6. Have fun exploring your own data!": {
            "level": 2,
            "html": "<div class='markdown-cell'>\n    <h2>6. Have fun exploring your own data!</h2>\n<p>Follow steps 1-5 above using your data and parameter adjustments\nbased on your own hypotheses.</p>\n\n</div>\n<div class='markdown-cell'>\n    \n\n</div>"
        }
    }
}