{
    "full_executed": true,
    "simulate_beta_modulated_erp_notebook.ipynb": {
        "4.6: Simulate Beta-modulated ERP": {
            "level": 1,
            "html": "<div class='markdown-cell'>\n    <h1>4.6: Simulate Beta-modulated ERP</h1>\n<p>This example demonstrates how event related potentials (ERP) are\nmodulated by prestimulus beta events. Specifically, this example\nreproduces Figure 5 from (Law et al.\u00a02021). To be consistent with the\npublication, the default network connectivity is altered. These\nmodifications demonstrate a potential mechanism by which transient beta\nactivity in the neocortex can suppress the perceptibility of sensory\ninput. This suppression depends on the timing of the beta event, and the\nincoming sensory information.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Authors: Nick Tolley <nicholas_tolley@brown.edu>\n\nfrom hnn_core import simulate_dipole, law_2021_model, jones_2009_model\nfrom hnn_core.viz import plot_dipole\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>We begin by instantiating the network model from (Law et\nal.\u00a02021):</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net = law_2021_model()\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>The Law 2021 model is based on the network model described in (Jones\net al.\u00a02009) with several important modifications. One of the most\nsignificant changes is substantially increasing the rise and fall time\nconstants of GABAb-conductances on L2 and L5 pyramidal. Another\nimportant change is the removal of calcium channels from basal dendrites\nand soma of L5 pyramidal cells specifically. We can inspect these\nproperties with the <code>net.cell_types</code> attribute which contains\ninformation on the biophysics and geometry of each cell.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net_jones = jones_2009_model()\n\njones_rise = net_jones.cell_types['L5_pyramidal'].synapses['gabab']['tau1']\nlaw_rise = net.cell_types['L5_pyramidal'].synapses['gabab']['tau1']\nprint(f'GABAb Rise (ms): {jones_rise} -> {law_rise}')\n\njones_fall = net_jones.cell_types['L5_pyramidal'].synapses['gabab']['tau2']\nlaw_fall = net.cell_types['L5_pyramidal'].synapses['gabab']['tau2']\nprint(f'GABAb Fall (ms): {jones_fall} -> {law_fall}\\n')\n\nprint('Apical Dendrite Channels:')\nprint(net.cell_types['L5_pyramidal'].sections['apical_1'].mechs.keys())\nprint(\"\\nBasal Dendrite Channels ('ca' missing):\")\nprint(net.cell_types['L5_pyramidal'].sections['basal_1'].mechs.keys())\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        GABAb Rise (ms): 1.0 -&gt; 45.0\nGABAb Fall (ms): 20.0 -&gt; 200.0\n\nApical Dendrite Channels:\ndict_keys([&#x27;hh2&#x27;, &#x27;ca&#x27;, &#x27;cad&#x27;, &#x27;kca&#x27;, &#x27;km&#x27;, &#x27;cat&#x27;, &#x27;ar&#x27;])\n\nBasal Dendrite Channels (&#x27;ca&#x27; missing):\ndict_keys([&#x27;hh2&#x27;, &#x27;cad&#x27;, &#x27;kca&#x27;, &#x27;km&#x27;, &#x27;cat&#x27;, &#x27;ar&#x27;])\n\n    </div>\n</div>\n<div class='markdown-cell'>\n    <p>A major change to the Jones 2009 model is the addition of a\nMartinotti-like recurrent tuft connection (Silberberg and Markram 2007).\nThis new connection originates from L5 basket cells, and provides GABAa\ninhibition on the distal dendrites of L5 pyramidal cells.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        print('Recurrent Tuft Connection')\nprint(net.connectivity[16])\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        Recurrent Tuft Connection\nL5_basket -&gt; L5_pyramidal\ncell counts: 35 srcs, 100 targets\nconnection probability: 1.0 \nloc: &#x27;distal&#x27;; receptor: &#x27;gabaa&#x27;\nweight: 0.025; delay: 1.0; lamtha: 70.0\n \n\n    </div>\n</div>\n<div class='markdown-cell'>\n    <p>The remaining changes to the connectivity was the removal of an\nL2_basket -&gt; L5_pyramidal GABAa connection, and replacing it with\nGABAb.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        print('New GABAb connection')\nprint(net.connectivity[15])\n\nprint('\\nConnection Removed from Law Model')\nprint(net_jones.connectivity[10])\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        New GABAb connection\nL2_basket -&gt; L5_pyramidal\ncell counts: 35 srcs, 100 targets\nconnection probability: 1.0 \nloc: &#x27;distal&#x27;; receptor: &#x27;gabab&#x27;\nweight: 0.0002; delay: 1.0; lamtha: 50.0\n \n\nConnection Removed from Law Model\nL2_basket -&gt; L5_pyramidal\ncell counts: 35 srcs, 100 targets\nconnection probability: 1.0 \nloc: &#x27;distal&#x27;; receptor: &#x27;gabaa&#x27;\nweight: 0.001; delay: 1.0; lamtha: 50.0\n \n\n    </div>\n</div>\n<div class='markdown-cell'>\n    <p>To demonstrate sensory depression, we will add the drives necessary\nto generate and ERP similar to our <a\nhref=\"https://dylansdaniels.github.io/website_redesign/content/05_erps/hnn_core.html\">ERP\nexample</a>, but modified to reflect the parameters used in (Law et\nal.\u00a02021). Specifically, we are considering the case where a tactile\nstimulus is delivered at 150 ms. 25 ms later, the first input to sensory\ncortex arrives as a proximal drive to the cortical column. Proximal\ndrive corresponds to projections from the direct thalamic nuclei. This\nis followed by one <code>distal</code> drive representing projections\nfrom indirect thalamic nuclei, and a final late proximal drive. It is\nimportant to note that the parameter values for each are different from\nprevious examples of the evoked response. This reflects the altered\nnetwork dynamics due to the changes described above.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        def add_erp_drives(net, stimulus_start):\n    # Distal evoked drive\n    weights_ampa_d1 = {'L2_basket': 0.0005, 'L2_pyramidal': 0.004,\n                       'L5_pyramidal': 0.0005}\n    weights_nmda_d1 = {'L2_basket': 0.0005, 'L2_pyramidal': 0.004,\n                       'L5_pyramidal': 0.0005}\n    syn_delays_d1 = {'L2_basket': 0.1, 'L2_pyramidal': 0.1,\n                     'L5_pyramidal': 0.1}\n    net.add_evoked_drive(\n        'evdist1', mu=70.0 + stimulus_start, sigma=0.0, numspikes=1,\n        weights_ampa=weights_ampa_d1, weights_nmda=weights_nmda_d1,\n        location='distal', synaptic_delays=syn_delays_d1, event_seed=274)\n\n    # Two proximal drives\n    weights_ampa_p1 = {'L2_basket': 0.002, 'L2_pyramidal': 0.0011,\n                       'L5_basket': 0.001, 'L5_pyramidal': 0.001}\n    syn_delays_prox = {'L2_basket': 0.1, 'L2_pyramidal': 0.1,\n                       'L5_basket': 1., 'L5_pyramidal': 1.}\n\n    # all NMDA weights are zero; pass None explicitly\n    net.add_evoked_drive(\n        'evprox1', mu=25.0 + stimulus_start, sigma=0.0, numspikes=1,\n        weights_ampa=weights_ampa_p1, weights_nmda=None,\n        location='proximal', synaptic_delays=syn_delays_prox, event_seed=544)\n\n    # Second proximal evoked drive. NB: only AMPA weights differ from first\n    weights_ampa_p2 = {'L2_basket': 0.005, 'L2_pyramidal': 0.005,\n                       'L5_basket': 0.01, 'L5_pyramidal': 0.01}\n    # all NMDA weights are zero; omit weights_nmda (defaults to None)\n    net.add_evoked_drive(\n        'evprox2', mu=135.0 + stimulus_start, sigma=0.0, numspikes=1,\n        weights_ampa=weights_ampa_p2, location='proximal',\n        synaptic_delays=syn_delays_prox, event_seed=814)\n\n    return net\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>A beta event is created by inducing simultaneous proximal and distal\ndrives. The input is just strong enough to evoke spiking in the L2\nbasket cells. This spiking causes GABAb mediated inhibition of the\nnetwork, and ultimately suppressed sensory detection.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        def add_beta_drives(net, beta_start):\n    # Distal Drive\n    weights_ampa_d1 = {'L2_basket': 0.00032, 'L2_pyramidal': 0.00008,\n                       'L5_pyramidal': 0.00004}\n    syn_delays_d1 = {'L2_basket': 0.5, 'L2_pyramidal': 0.5,\n                     'L5_pyramidal': 0.5}\n    net.add_bursty_drive(\n        'beta_dist', tstart=beta_start, tstart_std=0., tstop=beta_start + 50.,\n        burst_rate=1., burst_std=10., numspikes=2, spike_isi=10,\n        n_drive_cells=10, location='distal', weights_ampa=weights_ampa_d1,\n        synaptic_delays=syn_delays_d1, event_seed=290)\n\n    # Proximal Drive\n    weights_ampa_p1 = {'L2_basket': 0.00004, 'L2_pyramidal': 0.00002,\n                       'L5_basket': 0.00002, 'L5_pyramidal': 0.00002}\n    syn_delays_p1 = {'L2_basket': 0.1, 'L2_pyramidal': 0.1,\n                     'L5_basket': 1.0, 'L5_pyramidal': 1.0}\n\n    net.add_bursty_drive(\n        'beta_prox', tstart=beta_start, tstart_std=0., tstop=beta_start + 50.,\n        burst_rate=1., burst_std=20., numspikes=2, spike_isi=10,\n        n_drive_cells=10, location='proximal', weights_ampa=weights_ampa_p1,\n        synaptic_delays=syn_delays_p1, event_seed=300)\n    return net\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>We can now use our functions to create three distinct\nsimulations:</p>\n<ol type=\"1\">\n<li>beta event only,</li>\n<li>ERP only, and</li>\n<li>beta event + ERP.</li>\n</ol>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        beta_start, stimulus_start = 50.0, 125.0\nnet_beta = net.copy()\nnet_beta = add_beta_drives(net_beta, beta_start)\n\nnet_erp = net.copy()\nnet_erp = add_erp_drives(net_erp, stimulus_start)\n\nnet_beta_erp = net_beta.copy()\nnet_beta_erp = add_erp_drives(net_beta_erp, stimulus_start)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>And finally we simulate. Note that the default simulation time has\nbeen increased to 400 ms to observe the long time course over which beta\nevents can influence sensory input to the cortical column.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        dpls_beta = simulate_dipole(net_beta, tstop=400)\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        Joblib will run 1 trial(s) in parallel by distributing trials over 1 jobs.\nLoading custom mechanism files from /Users/austinsoplata/rep/brn/hnn-core/hnn_core/mod/arm64/.libs/libnrnmech.so\nBuilding the NEURON model\n[Done]\nTrial 1: 0.03 ms...\nTrial 1: 10.0 ms...\nTrial 1: 20.0 ms...\nTrial 1: 30.0 ms...\nTrial 1: 40.0 ms...\nTrial 1: 50.0 ms...\nTrial 1: 60.0 ms...\nTrial 1: 70.0 ms...\nTrial 1: 80.0 ms...\nTrial 1: 90.0 ms...\nTrial 1: 100.0 ms...\nTrial 1: 110.0 ms...\nTrial 1: 120.0 ms...\nTrial 1: 130.0 ms...\nTrial 1: 140.0 ms...\nTrial 1: 150.0 ms...\nTrial 1: 160.0 ms...\nTrial 1: 170.0 ms...\nTrial 1: 180.0 ms...\nTrial 1: 190.0 ms...\nTrial 1: 200.0 ms...\nTrial 1: 210.0 ms...\nTrial 1: 220.0 ms...\nTrial 1: 230.0 ms...\nTrial 1: 240.0 ms...\nTrial 1: 250.0 ms...\nTrial 1: 260.0 ms...\nTrial 1: 270.0 ms...\nTrial 1: 280.0 ms...\nTrial 1: 290.0 ms...\nTrial 1: 300.0 ms...\nTrial 1: 310.0 ms...\nTrial 1: 320.0 ms...\nTrial 1: 330.0 ms...\nTrial 1: 340.0 ms...\nTrial 1: 350.0 ms...\nTrial 1: 360.0 ms...\nTrial 1: 370.0 ms...\nTrial 1: 380.0 ms...\nTrial 1: 390.0 ms...\n\n    </div>\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        dpls_erp = simulate_dipole(net_erp, tstop=400)\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        Joblib will run 1 trial(s) in parallel by distributing trials over 1 jobs.\nBuilding the NEURON model\n[Done]\nTrial 1: 0.03 ms...\nTrial 1: 10.0 ms...\nTrial 1: 20.0 ms...\nTrial 1: 30.0 ms...\nTrial 1: 40.0 ms...\nTrial 1: 50.0 ms...\nTrial 1: 60.0 ms...\nTrial 1: 70.0 ms...\nTrial 1: 80.0 ms...\nTrial 1: 90.0 ms...\nTrial 1: 100.0 ms...\nTrial 1: 110.0 ms...\nTrial 1: 120.0 ms...\nTrial 1: 130.0 ms...\nTrial 1: 140.0 ms...\nTrial 1: 150.0 ms...\nTrial 1: 160.0 ms...\nTrial 1: 170.0 ms...\nTrial 1: 180.0 ms...\nTrial 1: 190.0 ms...\nTrial 1: 200.0 ms...\nTrial 1: 210.0 ms...\nTrial 1: 220.0 ms...\nTrial 1: 230.0 ms...\nTrial 1: 240.0 ms...\nTrial 1: 250.0 ms...\nTrial 1: 260.0 ms...\nTrial 1: 270.0 ms...\nTrial 1: 280.0 ms...\nTrial 1: 290.0 ms...\nTrial 1: 300.0 ms...\nTrial 1: 310.0 ms...\nTrial 1: 320.0 ms...\nTrial 1: 330.0 ms...\nTrial 1: 340.0 ms...\nTrial 1: 350.0 ms...\nTrial 1: 360.0 ms...\nTrial 1: 370.0 ms...\nTrial 1: 380.0 ms...\nTrial 1: 390.0 ms...\n\n    </div>\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        dpls_beta_erp = simulate_dipole(net_beta_erp, tstop=400)\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        Joblib will run 1 trial(s) in parallel by distributing trials over 1 jobs.\nBuilding the NEURON model\n[Done]\nTrial 1: 0.03 ms...\nTrial 1: 10.0 ms...\nTrial 1: 20.0 ms...\nTrial 1: 30.0 ms...\nTrial 1: 40.0 ms...\nTrial 1: 50.0 ms...\nTrial 1: 60.0 ms...\nTrial 1: 70.0 ms...\nTrial 1: 80.0 ms...\nTrial 1: 90.0 ms...\nTrial 1: 100.0 ms...\nTrial 1: 110.0 ms...\nTrial 1: 120.0 ms...\nTrial 1: 130.0 ms...\nTrial 1: 140.0 ms...\nTrial 1: 150.0 ms...\nTrial 1: 160.0 ms...\nTrial 1: 170.0 ms...\nTrial 1: 180.0 ms...\nTrial 1: 190.0 ms...\nTrial 1: 200.0 ms...\nTrial 1: 210.0 ms...\nTrial 1: 220.0 ms...\nTrial 1: 230.0 ms...\nTrial 1: 240.0 ms...\nTrial 1: 250.0 ms...\nTrial 1: 260.0 ms...\nTrial 1: 270.0 ms...\nTrial 1: 280.0 ms...\nTrial 1: 290.0 ms...\nTrial 1: 300.0 ms...\nTrial 1: 310.0 ms...\nTrial 1: 320.0 ms...\nTrial 1: 330.0 ms...\nTrial 1: 340.0 ms...\nTrial 1: 350.0 ms...\nTrial 1: 360.0 ms...\nTrial 1: 370.0 ms...\nTrial 1: 380.0 ms...\nTrial 1: 390.0 ms...\n\n    </div>\n</div>\n<div class='markdown-cell'>\n    <p>By inspecting the activity during the beta event, we can see that\nspiking occurs exclusively at 50 ms, the peak of the gaussian\ndistributed proximal and distal inputs. This spiking activity leads to\nsustained GABAb mediated inhibition of the L2 and L5 pyrmaidal cells.\nOne effect of this inhibition is an asymmetric beta event with a long\npositive tail.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        import matplotlib.pyplot as plt\nimport numpy as np\nfig, axes = plt.subplots(4, 1, sharex=True, figsize=(7, 7),\n                         constrained_layout=True)\nnet_beta.cell_response.plot_spikes_hist(ax=axes[0], show=False)\naxes[0].set_title('Beta Event Generation')\nplot_dipole(dpls_beta, ax=axes[1], layer='agg', tmin=1.0, color='b', show=False)\nnet_beta.cell_response.plot_spikes_raster(ax=axes[2], show=False)\naxes[2].set_title('Spike Raster')\n\n# Create a fixed-step tiling of frequencies from 1 to 40 Hz in steps of 1 Hz\nfreqs = np.arange(10., 60., 1.)\ndpls_beta[0].plot_tfr_morlet(freqs, n_cycles=7, ax=axes[3], show=False)\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 700x700 with 5 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_simulate_beta_modulated_erp_notebook/fig_01.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>Next we will inspect what happens when a sensory stimulus is\ndelivered 75 ms after a beta event. Note that the delay time for a\ntactile stimulus at the hand to arrive at the cortex is roughly 25 ms,\nwhich means the first proximal input to the cortical column occurs ~100\nms after the beta event.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        dpls_beta_erp[0].smooth(45)\nfig, axes = plt.subplots(3, 1, sharex=True, figsize=(7, 7),\n                         constrained_layout=True)\nplot_dipole(dpls_beta_erp, ax=axes[0], layer='agg', tmin=1.0, color='r',\n            show=False)\naxes[0].set_title('Beta Event + ERP')\nnet_beta_erp.cell_response.plot_spikes_hist(ax=axes[1], show=False)\naxes[1].set_title('Input Drives Histogram')\nnet_beta_erp.cell_response.plot_spikes_raster(ax=axes[2], show=False)\naxes[2].set_title('Spike Raster')\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 700x700 with 3 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_simulate_beta_modulated_erp_notebook/fig_02.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>To help understand the effect of beta mediated inhibition on the\nresponse to incoming sensory stimuli, we can compare the ERP and spiking\nactivity due to sensory input with and without a beta event. The\nsustained inhibition of the network ultimately depresses the sensory\nresponse which is associated with a reduced ERP amplitude</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        dpls_erp[0].smooth(45)\nfig, axes = plt.subplots(3, 1, sharex=True, figsize=(7, 7),\n                         constrained_layout=True)\nplot_dipole(dpls_beta_erp, ax=axes[0], layer='agg', tmin=1.0, color='r',\n            show=False)\nplot_dipole(dpls_erp, ax=axes[0], layer='agg', tmin=1.0, color='b', show=False)\naxes[0].set_title('Beta ERP Comparison')\naxes[0].legend(['ERP + Beta', 'ERP'])\nnet_beta_erp.cell_response.plot_spikes_raster(ax=axes[1], show=False)\naxes[1].set_title('Beta + ERP Spike Raster')\nnet_erp.cell_response.plot_spikes_raster(ax=axes[2], show=False)\naxes[2].set_title('ERP Spike Raster')\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 700x700 with 3 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_simulate_beta_modulated_erp_notebook/fig_03.png'/>\n</div>"
        },
        "References": {
            "level": 2,
            "html": "<div class='markdown-cell'>\n    <h2>References</h2>\n<ul>\n<li><p>Jones, Stephanie R., Dominique L. Pritchett, Michael A. Sikora,\nSteven M. Stufflebeam, Matti H\u00e4m\u00e4l\u00e4inen, and Christopher I. Moore. 2009.\n\u201cQuantitative Analysis and Biophysically Realistic Neural Modeling of\nthe MEG Mu Rhythm: Rhythmogenesis and Modulation of Sensory-Evoked\nResponses.\u201d Journal of Neurophysiology 102 (6): 3554\u201372. <a\nhref=\"https://doi.org/10.1152/jn.00535.2009\">https://doi.org/10.1152/jn.00535.2009</a>\n.</p></li>\n<li><p>Law, Robert G., Sarah Pugliese, Hyeyoung Shin, Danielle D. Sliva,\nShane Lee, Samuel Neymotin, Christopher Moore, and Stephanie R. Jones.\n2021. \u201cThalamocortical Mechanisms Regulating the Relationship between\nTransient Beta Events and Human Tactile Perception.\u201d bioRxiv. <a\nhref=\"https://doi.org/10.1101/2021.04.16.440210\">https://doi.org/10.1101/2021.04.16.440210</a>.</p></li>\n<li><p>Silberberg, Gilad, and Henry Markram. 2007. \u201cDisynaptic\nInhibition between Neocortical Pyramidal Cells Mediated by Martinotti\nCells.\u201d Neuron 53 (5): 735\u201346. <a\nhref=\"https://doi.org/10.1016/j.neuron.2007.02.012\">https://doi.org/10.1016/j.neuron.2007.02.012</a>.</p></li>\n</ul>\n\n</div>"
        }
    }
}