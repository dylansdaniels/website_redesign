{
    "full_executed": true,
    "modifying_local_connectivity_notebook.ipynb": {
        "4.3: Modifying local connectivity": {
            "level": 1,
            "html": "<div class='markdown-cell'>\n    <h1>4.3: Modifying local connectivity</h1>\n<p>This example demonstrates how to modify the network connectivity.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Author: Nick Tolley <nicholas_tolley@brown.edu>\n\nimport os.path as op\n\nimport matplotlib.pyplot as plt\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Let us import <code>hnn_core</code>.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        import hnn_core\nfrom hnn_core import jones_2009_model, simulate_dipole\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>To explore how to modify network connectivity, we will start with\nsimulating the evoked response from the <a\nhref=\"https://dylansdaniels.github.io/website_redesign/content/05_erps/hnn_core.html\">ERP\nexample</a> and explore how it changes with new connections. We first\ninstantiate the network. (Note: Setting\n<code>add_drives_from_params=True</code> loads a set of predefined\ndrives without the drives API shown previously).</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net_erp = jones_2009_model(add_drives_from_params=True)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Instantiating the network comes with a predefined set of connections\nthat reflect the canonical neocortical microcircuit.\n<code>net.connectivity</code> is a list of dictionaries which detail\nevery cell-cell, and drive-cell connection. The weights of these\nconnections can be visualized with <a\nhref=\"https://jonescompneurolab.github.io/hnn-core/stable/generated/hnn_core.viz.plot_connectivity_matrix.html#hnn_core.viz.plot_connectivity_matrix\">hnn_core.viz.plot_connectivity_matrix</a>\nas well as <a\nhref=\"https://jonescompneurolab.github.io/hnn-core/stable/generated/hnn_core.viz.plot_cell_connectivity.html#hnn_core.viz.plot_cell_connectivity\">hnn_core.viz.plot_cell_connectivity</a>.\nWe can search for specific connections using\n<code>pick_connection</code> which returns the indices of\n<code>net.connectivity</code> that match the provided parameters.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        from hnn_core.viz import plot_connectivity_matrix, plot_cell_connectivity, plot_drive_strength\nfrom hnn_core.network import pick_connection\n\nprint(len(net_erp.connectivity))\n\nconn_indices = pick_connection(\n    net=net_erp, src_gids='L5_basket', target_gids='L5_pyramidal',\n    loc='soma', receptor='gabaa')\nconn_idx = conn_indices[0]\nprint(net_erp.connectivity[conn_idx])\nplot_connectivity_matrix(net_erp, conn_idx, show=False)\n\n# Note here that `'src_gids'` is a `set` object\n# The `.pop()` method can be used to sample a random element\nsrc_gid = net_erp.connectivity[conn_idx]['src_gids'].copy().pop()\nfig = plot_cell_connectivity(net_erp, conn_idx, src_gid, show=False)\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        38\nL5_basket -&gt; L5_pyramidal\ncell counts: 35 srcs, 100 targets\nconnection probability: 1.0 \nloc: &#x27;soma&#x27;; receptor: &#x27;gabaa&#x27;\nweight: 0.025; delay: 1.0; lamtha: 70.0\n \n\n        &lt;Figure size 640x480 with 2 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_modifying_local_connectivity_notebook/fig_01.png'/>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 640x480 with 3 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_modifying_local_connectivity_notebook/fig_02.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>Data recorded during simulations are stored under <a\nhref=\"https://jonescompneurolab.github.io/hnn-core/stable/generated/hnn_core.CellResponse.html#hnn_core.CellResponse\">CellResponse</a>.\nSpiking activity can be visualized after a simulation is using <a\nhref=\"https://jonescompneurolab.github.io/hnn-core/stable/generated/hnn_core.CellResponse.html#hnn_core.CellResponse.plot_spikes_raster\">CellResponse.plot_spikes_raster</a>:</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        dpl_erp = simulate_dipole(net_erp, tstop=170., n_trials=1)\nnet_erp.cell_response.plot_spikes_raster(show=False)\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        Joblib will run 1 trial(s) in parallel by distributing trials over 1 jobs.\nLoading custom mechanism files from /Users/austinsoplata/rep/brn/hnn-core/hnn_core/mod/arm64/.libs/libnrnmech.so\nBuilding the NEURON model\n[Done]\nTrial 1: 0.03 ms...\nTrial 1: 10.0 ms...\nTrial 1: 20.0 ms...\nTrial 1: 30.0 ms...\nTrial 1: 40.0 ms...\nTrial 1: 50.0 ms...\nTrial 1: 60.0 ms...\nTrial 1: 70.0 ms...\nTrial 1: 80.0 ms...\nTrial 1: 90.0 ms...\nTrial 1: 100.0 ms...\nTrial 1: 110.0 ms...\nTrial 1: 120.0 ms...\nTrial 1: 130.0 ms...\nTrial 1: 140.0 ms...\nTrial 1: 150.0 ms...\nTrial 1: 160.0 ms...\n\n        &lt;Figure size 640x480 with 1 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_modifying_local_connectivity_notebook/fig_03.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>We can also define our own connections to test the effect of\ndifferent connectivity patterns. To start,\n<code>net.clear_connectivity()</code> can be used to clear all\ncell-to-cell connections. By default, previously defined drives to the\nnetwork are retained, but can be removed with\n<code>net.clear_drives()</code>. <code>net.add_connection</code> is then\nused to create a custom network. Let us first create an all-to-all\nconnectivity pattern between the L5 pyramidal cells, and L2 basket\ncells. <a\nhref=\"https://jonescompneurolab.github.io/hnn-core/stable/generated/hnn_core.Network.html#hnn_core.Network.add_connection\">Network.add_connection</a>\nallows connections to be specified with either cell names, or the cell\nIDs (gids) directly.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        def get_network(probability=1.0):\n    net = jones_2009_model(add_drives_from_params=True)\n    net.clear_connectivity()\n\n    # Pyramidal cell connections\n    location, receptor = 'distal', 'ampa'\n    weight, delay, lamtha = 1.0, 1.0, 70\n    src = 'L5_pyramidal'\n    conn_seed = 3\n    for target in ['L5_pyramidal', 'L2_basket']:\n        net.add_connection(src, target, location, receptor,\n                           delay, weight, lamtha, probability=probability,\n                           conn_seed=conn_seed)\n\n    # Basket cell connections\n    location, receptor = 'soma', 'gabaa'\n    weight, delay, lamtha = 1.0, 1.0, 70\n    src = 'L2_basket'\n    for target in ['L5_pyramidal', 'L2_basket']:\n        net.add_connection(src, target, location, receptor,\n                           delay, weight, lamtha, probability=probability,\n                           conn_seed=conn_seed)\n    return net\n\n\nnet_all = get_network()\ndpl_all = simulate_dipole(net_all, tstop=170., n_trials=1)\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        Joblib will run 1 trial(s) in parallel by distributing trials over 1 jobs.\nBuilding the NEURON model\n[Done]\nTrial 1: 0.03 ms...\nTrial 1: 10.0 ms...\nTrial 1: 20.0 ms...\nTrial 1: 30.0 ms...\nTrial 1: 40.0 ms...\nTrial 1: 50.0 ms...\nTrial 1: 60.0 ms...\nTrial 1: 70.0 ms...\nTrial 1: 80.0 ms...\nTrial 1: 90.0 ms...\nTrial 1: 100.0 ms...\nTrial 1: 110.0 ms...\nTrial 1: 120.0 ms...\nTrial 1: 130.0 ms...\nTrial 1: 140.0 ms...\nTrial 1: 150.0 ms...\nTrial 1: 160.0 ms...\n\n    </div>\n</div>\n<div class='markdown-cell'>\n    <p>We can additionally use the <code>probability</code> argument to\ncreate a sparse connectivity pattern instead of all-to-all. Let's try\ncreating the same network with a 10% chance of cells connecting to each\nother.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net_sparse = get_network(probability=0.1)\ndpl_sparse = simulate_dipole(net_sparse, tstop=170., n_trials=1)\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        Joblib will run 1 trial(s) in parallel by distributing trials over 1 jobs.\nBuilding the NEURON model\n[Done]\nTrial 1: 0.03 ms...\nTrial 1: 10.0 ms...\nTrial 1: 20.0 ms...\nTrial 1: 30.0 ms...\nTrial 1: 40.0 ms...\nTrial 1: 50.0 ms...\nTrial 1: 60.0 ms...\nTrial 1: 70.0 ms...\nTrial 1: 80.0 ms...\nTrial 1: 90.0 ms...\nTrial 1: 100.0 ms...\nTrial 1: 110.0 ms...\nTrial 1: 120.0 ms...\nTrial 1: 130.0 ms...\nTrial 1: 140.0 ms...\nTrial 1: 150.0 ms...\nTrial 1: 160.0 ms...\n\n    </div>\n</div>\n<div class='markdown-cell'>\n    <p>With the previous connection pattern there appears to be synchronous\nrhythmic firing of the L5 pyramidal cells with a period of 10 ms. The\nsynchronous activity is visible as vertical lines where several cells\nfire simultaneously Using the sparse connectivity pattern produced a lot\nmore spiking in the L5 pyramidal cells.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net_all.cell_response.plot_spikes_raster(show=False)\nnet_sparse.cell_response.plot_spikes_raster(show=False)\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 640x480 with 1 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_modifying_local_connectivity_notebook/fig_04.png'/>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 640x480 with 1 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_modifying_local_connectivity_notebook/fig_05.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>We can plot the sparse connectivity pattern between cell\npopulations.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        conn_indices = pick_connection(\n    net=net_sparse, src_gids='L2_basket', target_gids='L2_basket',\n    loc='soma', receptor='gabaa')\n\nconn_idx = conn_indices[0]\nplot_connectivity_matrix(net_sparse, conn_idx, show=False)\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 640x480 with 2 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_modifying_local_connectivity_notebook/fig_06.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>Note that the sparsity is in addition to the weight decay with\ndistance from the source cell.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        src_gid = net_sparse.connectivity[conn_idx]['src_gids'].copy().pop()\nplot_cell_connectivity(net_sparse, conn_idx, src_gid=src_gid, show=False)\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 640x480 with 3 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_modifying_local_connectivity_notebook/fig_07.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>We can plot the strengths of each external drive across each cell\ntypes.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # This can be done in a relative way, enabling you to compare the proportion\n# coming from each drive:\nplot_drive_strength(net_erp, show=False)\n\n# Alternatively, you can compare the total amount of each drive in conductance:\nplot_drive_strength(net_erp, normalize=False, show=False)\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 1200x600 with 2 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_modifying_local_connectivity_notebook/fig_08.png'/>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 1200x600 with 2 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_modifying_local_connectivity_notebook/fig_09.png'/>\n</div>\n<div class='markdown-cell'>\n    <p>In the sparse network, there still appears to be some rhythmicity\nwhere the cells are firing synchronously with a smaller period of 4-5\nms. As a final step, we can see how this change in spiking activity\nimpacts the aggregate current dipole.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        from hnn_core.viz import plot_dipole\nfig, axes = plt.subplots(2, 1, sharex=True, figsize=(6, 6),\n                         constrained_layout=True)\n\nwindow_len = 30  # ms\nscaling_factor = 3000\ndpls = [dpl_erp[0].smooth(window_len).scale(scaling_factor),\n        dpl_all[0].smooth(window_len).scale(scaling_factor),\n        dpl_sparse[0].smooth(window_len).scale(scaling_factor)]\n\nplot_dipole(dpls, ax=axes[0], layer='agg', show=False)\naxes[0].legend(['Default', 'Custom All', 'Custom Sparse'])\nnet_erp.cell_response.plot_spikes_hist(\n    ax=axes[1], spike_types=['evprox', 'evdist'], show=False)\nplt.show()\n    </code>\n</div>\n<div class='output-cell'><div class='output-label'>\n    Out:\n</div>\n    <div class='output-code'>\n        &lt;Figure size 600x600 with 2 Axes&gt;\n    </div>\n</div>\n<div class='output-cell'>\n    <img src='output_nb_modifying_local_connectivity_notebook/fig_010.png'/>\n</div>"
        }
    }
}