{
    "full_executed": false,
    "plot_firing_pattern_notebook.ipynb": {
        "4.1: Plot firing pattern": {
            "level": 1,
            "html": "<div class='markdown-cell'>\n    <h1>4.1: Plot firing pattern</h1>\n<p>This example demonstrates how to inspect the firing pattern of cells\nin the HNN model.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        # Authors: Mainak Jas <mjas@harvard.mgh.edu>\n#          Nick Tolley <nick nicholas_tolley@brown.edu>\n\nimport os.path as op\nimport tempfile\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Let us import <code>hnn_core</code>.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        import hnn_core\nfrom hnn_core import read_spikes, jones_2009_model, simulate_dipole\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Now let's build the network. We have used the same weights as in the\n<a\nhref=\"https://dylansdaniels.github.io/website_redesign/content/05_erps/hnn_core.html\">ERP\nexample</a>.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        import matplotlib.pyplot as plt\n\nnet = jones_2009_model()\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p><code>net</code> does not have any driving inputs and only defines\nthe local network connectivity. Let us go ahead and first add a distal\nevoked drive. We need to define the AMPA and NMDA weights for the\nconnections. An \"evoked drive\" defines inputs that are normally\ndistributed with a certain mean and standard deviation.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        weights_ampa_d1 = {'L2_basket': 0.006562, 'L2_pyramidal': 7e-6,\n                   'L5_pyramidal': 0.142300}\nweights_nmda_d1 = {'L2_basket': 0.019482, 'L2_pyramidal': 0.004317,\n                   'L5_pyramidal': 0.080074}\nsynaptic_delays_d1 = {'L2_basket': 0.1, 'L2_pyramidal': 0.1,\n                      'L5_pyramidal': 0.1}\nnet.add_evoked_drive(\n    'evdist1', mu=63.53, sigma=3.85, numspikes=1, weights_ampa=weights_ampa_d1,\n    weights_nmda=weights_nmda_d1, location='distal',\n    synaptic_delays=synaptic_delays_d1, event_seed=274)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>The reason it is called an \"evoked drive\" is it can be used to\nsimulate waveforms resembling evoked responses. Here, we show how to do\nit with two proximal drives which drive current up the dendrite and one\ndistal drive which drives current down the dendrite producing the\nnegative deflection.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        weights_ampa_p1 = {'L2_basket': 0.08831, 'L2_pyramidal': 0.01525,\n                   'L5_basket': 0.19934, 'L5_pyramidal': 0.00865}\nsynaptic_delays_prox = {'L2_basket': 0.1, 'L2_pyramidal': 0.1,\n                        'L5_basket': 1., 'L5_pyramidal': 1.}\n\n# all NMDA weights are zero; pass None explicitly\nnet.add_evoked_drive(\n    'evprox1', mu=26.61, sigma=2.47, numspikes=1, weights_ampa=weights_ampa_p1,\n    weights_nmda=None, location='proximal',\n    synaptic_delays=synaptic_delays_prox, event_seed=544)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Now we add the second proximal evoked drive and simulate the network\ndynamics with somatic voltage recordings enabled. Note: only AMPA\nweights differ from first.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        weights_ampa_p2 = {'L2_basket': 0.000003, 'L2_pyramidal': 1.438840,\n                   'L5_basket': 0.008958, 'L5_pyramidal': 0.684013}\n# all NMDA weights are zero; omit weights_nmda (defaults to None)\nnet.add_evoked_drive(\n    'evprox2', mu=137.12, sigma=8.33, numspikes=1,\n    weights_ampa=weights_ampa_p2, location='proximal',\n    synaptic_delays=synaptic_delays_prox, event_seed=814)\n\ndpls = simulate_dipole(net, tstop=170., record_vsec='soma')\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Here, we explain more details about the data structures and how they\ncan be used to better interpret the data. The cell IDs (gids) uniquely\ndefine neurons in the network and are stored in the <a\nhref=\"https://jonescompneurolab.github.io/hnn-core/stable/generated/hnn_core.Network.html#hnn_core.Network\">Network</a>\nobject as a dictionary</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        gid_ranges = net.gid_ranges\nprint(net.gid_ranges)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Simulated voltage in the soma and other cell sections are stored in\n<a\nhref=\"https://jonescompneurolab.github.io/hnn-core/stable/generated/hnn_core.CellResponse.html#hnn_core.CellResponse\">CellResponse</a>\nas a dictionary. The CellResponse object stores data produced by\nindividual cells including spikes, voltages and currents.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        trial_idx = 0\nvsec = net.cell_response.vsec[trial_idx]\nprint(vsec.keys())\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>We can plot the firing pattern of individual cells by indexing with\nthe gid</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        gid = 170\nplt.figure(figsize=(4, 4), constrained_layout=True)\nplt.plot(net.cell_response.times, vsec[gid]['soma'])\nplt.title('%s (gid=%d)' % (net.gid_to_type(gid), gid))\nplt.xlabel('Time (ms)')\nplt.ylabel('Voltage (mV)')\nplt.show()\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Also, we can plot the spikes in the network and write them to text\nfiles. Note that we can use formatting syntax to specify the filename\npattern with which each trial will be written\n<code>(&amp;#x27;spk_1.txt&amp;#x27;, &amp;#x27;spk_2.txt, ...)</code>.\nTo read spikes back in, we can use wildcard expressions.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        net.cell_response.plot_spikes_raster(show=False)\nwith tempfile.TemporaryDirectory() as tmp_dir_name:\n    net.cell_response.write(op.join(tmp_dir_name, 'spk_%d.txt'))\n    cell_response = read_spikes(op.join(tmp_dir_name, 'spk_*.txt'))\ncell_response.plot_spikes_raster(show=False)\nplt.show()\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>We can additionally calculate the mean spike rates for each cell\nclass by specifying a time window with <code>tstart</code> and\n<code>tstop</code>.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        all_rates = cell_response.mean_rates(tstart=0, tstop=170,\n                                     gid_ranges=net.gid_ranges,\n                                     mean_type='all')\ntrial_rates = cell_response.mean_rates(tstart=0, tstop=170,\n                                       gid_ranges=net.gid_ranges,\n                                       mean_type='trial')\nprint('Mean spike rates across trials:')\nprint(all_rates)\nprint('Mean spike rates for individual trials:')\nprint(trial_rates)\n    </code>\n</div>\n<div class='markdown-cell'>\n    <p>Finally, we can plot the soma voltage along with the spiking activity\nwith raster plots and histograms for the pyramidal cells.</p>\n\n</div>\n<div class='code-cell'>\n    <code class='language-python'>\n        fig, axes = plt.subplots(3, 1, figsize=(5, 7), sharex=True)\n\nfor idx in range(10):  # only 10 cells per cell-type\n    gid = gid_ranges['L2_pyramidal'][idx]\n    axes[0].plot(net.cell_response.times, vsec[gid]['soma'], color='g')\n    gid = gid_ranges['L5_pyramidal'][idx]\n    axes[0].plot(net.cell_response.times, vsec[gid]['soma'], color='r')\n\nnet.cell_response.plot_spikes_raster(ax=axes[1], show=False)\nnet.cell_response.plot_spikes_hist(ax=axes[2],\n                                   spike_types=['L5_pyramidal',\n                                                'L2_pyramidal'],\n                                   show=False)\nplt.show()\n    </code>\n</div>"
        }
    }
}